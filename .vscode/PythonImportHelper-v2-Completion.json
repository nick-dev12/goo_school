[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "Etablissement",
        "importPath": "school_admin.model.etablissement_model",
        "description": "school_admin.model.etablissement_model",
        "isExtraImport": true,
        "detail": "school_admin.model.etablissement_model",
        "documentation": {}
    },
    {
        "label": "Etablissement",
        "importPath": "school_admin.model.etablissement_model",
        "description": "school_admin.model.etablissement_model",
        "isExtraImport": true,
        "detail": "school_admin.model.etablissement_model",
        "documentation": {}
    },
    {
        "label": "Etablissement",
        "importPath": "school_admin.model.etablissement_model",
        "description": "school_admin.model.etablissement_model",
        "isExtraImport": true,
        "detail": "school_admin.model.etablissement_model",
        "documentation": {}
    },
    {
        "label": "Etablissement",
        "importPath": "school_admin.model.etablissement_model",
        "description": "school_admin.model.etablissement_model",
        "isExtraImport": true,
        "detail": "school_admin.model.etablissement_model",
        "documentation": {}
    },
    {
        "label": "Facturation",
        "importPath": "school_admin.model.facturation_model",
        "description": "school_admin.model.facturation_model",
        "isExtraImport": true,
        "detail": "school_admin.model.facturation_model",
        "documentation": {}
    },
    {
        "label": "Facturation",
        "importPath": "school_admin.model.facturation_model",
        "description": "school_admin.model.facturation_model",
        "isExtraImport": true,
        "detail": "school_admin.model.facturation_model",
        "documentation": {}
    },
    {
        "label": "Facturation",
        "importPath": "school_admin.model.facturation_model",
        "description": "school_admin.model.facturation_model",
        "isExtraImport": true,
        "detail": "school_admin.model.facturation_model",
        "documentation": {}
    },
    {
        "label": "Facturation",
        "importPath": "school_admin.model.facturation_model",
        "description": "school_admin.model.facturation_model",
        "isExtraImport": true,
        "detail": "school_admin.model.facturation_model",
        "documentation": {}
    },
    {
        "label": "Facturation",
        "importPath": "school_admin.model.facturation_model",
        "description": "school_admin.model.facturation_model",
        "isExtraImport": true,
        "detail": "school_admin.model.facturation_model",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "CASCADE",
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "isExtraImport": true,
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "BaseBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "EtablissementController",
        "importPath": "school_admin.controllers.etablissement_controller",
        "description": "school_admin.controllers.etablissement_controller",
        "isExtraImport": true,
        "detail": "school_admin.controllers.etablissement_controller",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "school.asgi",
        "description": "school.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "school.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nimport os\n# ...\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'school_admin/static'),  # Ajouter le chemin des fichiers statiques de l'application\n]\n# Configuration des sessions\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session ne expire pas quand le navigateur est fermé\n# Age de la session en secondes",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'school_admin/static'),  # Ajouter le chemin des fichiers statiques de l'application\n]\n# Configuration des sessions\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session ne expire pas quand le navigateur est fermé\n# Age de la session en secondes\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # 2 semaines\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'school_admin/static'),  # Ajouter le chemin des fichiers statiques de l'application\n]\n# Configuration des sessions\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session ne expire pas quand le navigateur est fermé\n# Age de la session en secondes\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # 2 semaines\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_EXPIRE_AT_BROWSER_CLOSE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "SESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session ne expire pas quand le navigateur est fermé\n# Age de la session en secondes\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # 2 semaines\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-5%&6bpaizqq8n)h7%7i7t&1dci^n+-entc_cy%_w4-aabu57o9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_AGE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # 2 semaines\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-5%&6bpaizqq8n)h7%7i7t&1dci^n+-entc_cy%_w4-aabu57o9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-5%&6bpaizqq8n)h7%7i7t&1dci^n+-entc_cy%_w4-aabu57o9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'school_admin',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'school_admin',\n]\nMIDDLEWARE = [",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'school_admin.middleware.AuthenticationMiddleware',  # Notre middleware d'authentification personnalisé\n]",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "ROOT_URLCONF = 'school.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'school_admin' / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'school_admin' / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "WSGI_APPLICATION = 'school.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'goo_school',          # ← Le nom de ta base\n        'USER': 'postgres',             # ← Utilisateur (par défaut postgres)\n        'PASSWORD': 'Ludvanne', # ← Le mot de passe que tu as défini à l'installation\n        'HOST': 'localhost',            # ← Ou 127.0.0.1",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'goo_school',          # ← Le nom de ta base\n        'USER': 'postgres',             # ← Utilisateur (par défaut postgres)\n        'PASSWORD': 'Ludvanne', # ← Le mot de passe que tu as défini à l'installation\n        'HOST': 'localhost',            # ← Ou 127.0.0.1\n        'PORT': '5432',                 # ← Port par défaut de PostgreSQL\n        'OPTIONS': {\n            'client_encoding': 'UTF8',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fr-fr'\nTIME_ZONE = 'Europe/Paris'\nUSE_I18N = True\nUSE_TZ = True\n# Configuration de l'encodage UTF-8\nDEFAULT_CHARSET = 'utf-8'\nFILE_CHARSET = 'utf-8'\n# Configuration de l'encodage pour les templates\nTEMPLATES[0]['OPTIONS']['context_processors'].extend([\n    'django.template.context_processors.i18n',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "TIME_ZONE = 'Europe/Paris'\nUSE_I18N = True\nUSE_TZ = True\n# Configuration de l'encodage UTF-8\nDEFAULT_CHARSET = 'utf-8'\nFILE_CHARSET = 'utf-8'\n# Configuration de l'encodage pour les templates\nTEMPLATES[0]['OPTIONS']['context_processors'].extend([\n    'django.template.context_processors.i18n',\n])",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Configuration de l'encodage UTF-8\nDEFAULT_CHARSET = 'utf-8'\nFILE_CHARSET = 'utf-8'\n# Configuration de l'encodage pour les templates\nTEMPLATES[0]['OPTIONS']['context_processors'].extend([\n    'django.template.context_processors.i18n',\n])\n# Configuration de l'encodage pour les formulaires",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "USE_TZ = True\n# Configuration de l'encodage UTF-8\nDEFAULT_CHARSET = 'utf-8'\nFILE_CHARSET = 'utf-8'\n# Configuration de l'encodage pour les templates\nTEMPLATES[0]['OPTIONS']['context_processors'].extend([\n    'django.template.context_processors.i18n',\n])\n# Configuration de l'encodage pour les formulaires\nFORM_RENDERER = 'django.forms.renderers.TemplatesSetting'",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CHARSET",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "DEFAULT_CHARSET = 'utf-8'\nFILE_CHARSET = 'utf-8'\n# Configuration de l'encodage pour les templates\nTEMPLATES[0]['OPTIONS']['context_processors'].extend([\n    'django.template.context_processors.i18n',\n])\n# Configuration de l'encodage pour les formulaires\nFORM_RENDERER = 'django.forms.renderers.TemplatesSetting'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "FILE_CHARSET",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "FILE_CHARSET = 'utf-8'\n# Configuration de l'encodage pour les templates\nTEMPLATES[0]['OPTIONS']['context_processors'].extend([\n    'django.template.context_processors.i18n',\n])\n# Configuration de l'encodage pour les formulaires\nFORM_RENDERER = 'django.forms.renderers.TemplatesSetting'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "FORM_RENDERER",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Configuration du modèle d'utilisateur personnalisé\nAUTH_USER_MODEL = 'school_admin.CompteUser'\n# Configuration des backends d'authentification",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Configuration du modèle d'utilisateur personnalisé\nAUTH_USER_MODEL = 'school_admin.CompteUser'\n# Configuration des backends d'authentification\nAUTHENTICATION_BACKENDS = [\n    'school_admin.authentication_backends.MultiUserBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Garder le backend par défaut en fallback",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Configuration du modèle d'utilisateur personnalisé\nAUTH_USER_MODEL = 'school_admin.CompteUser'\n# Configuration des backends d'authentification\nAUTHENTICATION_BACKENDS = [\n    'school_admin.authentication_backends.MultiUserBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Garder le backend par défaut en fallback\n]\n# Configuration des fichiers média\nMEDIA_URL = '/media/'",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'school_admin.CompteUser'\n# Configuration des backends d'authentification\nAUTHENTICATION_BACKENDS = [\n    'school_admin.authentication_backends.MultiUserBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Garder le backend par défaut en fallback\n]\n# Configuration des fichiers média\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configuration du logging pour le débogage",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'school_admin.authentication_backends.MultiUserBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Garder le backend par défaut en fallback\n]\n# Configuration des fichiers média\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configuration du logging pour le débogage\nLOGGING = {\n    'version': 1,",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configuration du logging pour le débogage\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configuration du logging pour le débogage\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'root': {\n        'handlers': ['console'],",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school.urls",
        "description": "school.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('school_admin.urls', namespace='school_admin')),\n    path('', include('school_admin.personal_url.directeur_url', namespace='directeur')),\n    path('', include('school_admin.personal_url.personnel_url', namespace='personnel')),\n    path('', include('school_admin.personal_url.administrateur_etablissement_url', namespace='administrateur_etablissement')),\n    path('', include('school_admin.personal_url.personnel_administratif_url', namespace='personnel_administratif')),\n    path('', include('school_admin.personal_url.secretaire_url', namespace='secretaire')),\n    path('', include('school_admin.personal_url.professeur_url', namespace='professeur')),\n    path('', include('school_admin.personal_url.matiere_url', namespace='matiere')),",
        "detail": "school.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "school.wsgi",
        "description": "school.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "school.wsgi",
        "documentation": {}
    },
    {
        "label": "AdministrateurCompteController",
        "kind": 6,
        "importPath": "school_admin.controllers.administrateur_compte_controller",
        "description": "school_admin.controllers.administrateur_compte_controller",
        "peekOfCode": "class AdministrateurCompteController:\n    @staticmethod\n    def get_user_compte_administrateur(request):\n        \"\"\"\n        Vue pour la création d'un compte administrateur\n        \"\"\"\n        user = request.user\n        if user.is_authenticated and user.fonction == 'administrateur':\n            return user\n        else:",
        "detail": "school_admin.controllers.administrateur_compte_controller",
        "documentation": {}
    },
    {
        "label": "AffectationController",
        "kind": 6,
        "importPath": "school_admin.controllers.affectation_controller",
        "description": "school_admin.controllers.affectation_controller",
        "peekOfCode": "class AffectationController:\n    @staticmethod\n    @login_required\n    def affectation_professeurs(request):\n        \"\"\"\n        Page principale d'affectation des professeurs aux classes\n        \"\"\"\n        # Vérifier que l'utilisateur est soit du personnel administratif soit un directeur\n        if isinstance(request.user, Etablissement):\n            etablissement = request.user",
        "detail": "school_admin.controllers.affectation_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.affectation_controller",
        "description": "school_admin.controllers.affectation_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AffectationController:\n    @staticmethod\n    @login_required\n    def affectation_professeurs(request):\n        \"\"\"\n        Page principale d'affectation des professeurs aux classes\n        \"\"\"\n        # Vérifier que l'utilisateur est soit du personnel administratif soit un directeur\n        if isinstance(request.user, Etablissement):",
        "detail": "school_admin.controllers.affectation_controller",
        "documentation": {}
    },
    {
        "label": "AffectationSalleController",
        "kind": 6,
        "importPath": "school_admin.controllers.affectation_salle_controller",
        "description": "school_admin.controllers.affectation_salle_controller",
        "peekOfCode": "class AffectationSalleController:\n    @staticmethod\n    @login_required\n    def liste_affectations(request):\n        \"\"\"Affiche la liste des affectations salles-classes\"\"\"\n        user = request.user\n        # Vérifier le type d'utilisateur\n        if isinstance(user, PersonnelAdministratif):\n            etablissement = user.etablissement\n            personnel = user",
        "detail": "school_admin.controllers.affectation_salle_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.affectation_salle_controller",
        "description": "school_admin.controllers.affectation_salle_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass AffectationSalleController:\n    @staticmethod\n    @login_required\n    def liste_affectations(request):\n        \"\"\"Affiche la liste des affectations salles-classes\"\"\"\n        user = request.user\n        # Vérifier le type d'utilisateur\n        if isinstance(user, PersonnelAdministratif):\n            etablissement = user.etablissement",
        "detail": "school_admin.controllers.affectation_salle_controller",
        "documentation": {}
    },
    {
        "label": "ClasseController",
        "kind": 6,
        "importPath": "school_admin.controllers.classe_controller",
        "description": "school_admin.controllers.classe_controller",
        "peekOfCode": "class ClasseController:\n    \"\"\"\n    Contrôleur pour gérer les classes d'un établissement\n    \"\"\"\n    @staticmethod\n    def generate_code_classe(nom, niveau, etablissement):\n        \"\"\"\n        Génère un code de classe unique basé sur le nom, niveau et établissement\n        \"\"\"\n        # Préfixes selon le niveau",
        "detail": "school_admin.controllers.classe_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.classe_controller",
        "description": "school_admin.controllers.classe_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ClasseController:\n    \"\"\"\n    Contrôleur pour gérer les classes d'un établissement\n    \"\"\"\n    @staticmethod\n    def generate_code_classe(nom, niveau, etablissement):\n        \"\"\"\n        Génère un code de classe unique basé sur le nom, niveau et établissement\n        \"\"\"",
        "detail": "school_admin.controllers.classe_controller",
        "documentation": {}
    },
    {
        "label": "CommercialCompteController",
        "kind": 6,
        "importPath": "school_admin.controllers.commercial_compte_controller",
        "description": "school_admin.controllers.commercial_compte_controller",
        "peekOfCode": "class CommercialCompteController:\n    \"\"\"\n    Contrôleur pour la gestion des comptes commerciaux\n    \"\"\"\n    @staticmethod\n    def get_user_compte_commercial(request):\n        \"\"\"\n        Vue pour la création d'un compte commercial\n        \"\"\"\n        #recupere les informations du compte commercial connecte",
        "detail": "school_admin.controllers.commercial_compte_controller",
        "documentation": {}
    },
    {
        "label": "CompteUserController",
        "kind": 6,
        "importPath": "school_admin.controllers.compte_user_controller",
        "description": "school_admin.controllers.compte_user_controller",
        "peekOfCode": "class CompteUserController:\n    @staticmethod\n    def compte_user_register_view(request):\n        # Initialisation des données pour pré-remplir en cas d'erreur\n        form_data = {}\n        field_errors = {}\n        if request.method == 'POST':\n            # Récupération des données\n            form_data = {\n                'nom': request.POST.get('nom', '').strip(),",
        "detail": "school_admin.controllers.compte_user_controller",
        "documentation": {}
    },
    {
        "label": "EtablissementController",
        "kind": 6,
        "importPath": "school_admin.controllers.etablissement_controller",
        "description": "school_admin.controllers.etablissement_controller",
        "peekOfCode": "class EtablissementController:\n    \"\"\"\n    Contrôleur pour gérer toutes les actions liées aux établissements\n    \"\"\"\n    @staticmethod\n    def generate_etablissement_code(type_etablissement):\n        \"\"\"\n        Génère un code unique pour un établissement avec un préfixe basé sur le type\n        Args:\n            type_etablissement (str): Le type d'établissement ('primary', 'secondary', 'highschool')",
        "detail": "school_admin.controllers.etablissement_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.etablissement_controller",
        "description": "school_admin.controllers.etablissement_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass EtablissementController:\n    \"\"\"\n    Contrôleur pour gérer toutes les actions liées aux établissements\n    \"\"\"\n    @staticmethod\n    def generate_etablissement_code(type_etablissement):\n        \"\"\"\n        Génère un code unique pour un établissement avec un préfixe basé sur le type\n        Args:",
        "detail": "school_admin.controllers.etablissement_controller",
        "documentation": {}
    },
    {
        "label": "MatiereController",
        "kind": 6,
        "importPath": "school_admin.controllers.matiere_controller",
        "description": "school_admin.controllers.matiere_controller",
        "peekOfCode": "class MatiereController:\n    \"\"\"\n    Contrôleur pour la gestion des matières\n    \"\"\"\n    @staticmethod\n    @login_required\n    def liste_matieres(request):\n        \"\"\"\n        Affiche la liste des matières avec possibilité d'ajout\n        \"\"\"",
        "detail": "school_admin.controllers.matiere_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.matiere_controller",
        "description": "school_admin.controllers.matiere_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MatiereController:\n    \"\"\"\n    Contrôleur pour la gestion des matières\n    \"\"\"\n    @staticmethod\n    @login_required\n    def liste_matieres(request):\n        \"\"\"\n        Affiche la liste des matières avec possibilité d'ajout",
        "detail": "school_admin.controllers.matiere_controller",
        "documentation": {}
    },
    {
        "label": "PersonnelController",
        "kind": 6,
        "importPath": "school_admin.controllers.personnel_controller",
        "description": "school_admin.controllers.personnel_controller",
        "peekOfCode": "class PersonnelController:\n    \"\"\"\n    Contrôleur pour gérer le personnel administratif\n    \"\"\"\n    @staticmethod\n    def generate_numero_employe(fonction, etablissement):\n        \"\"\"\n        Génère un numéro d'employé unique basé sur le rôle et l'établissement\n        \"\"\"\n        # Préfixes selon le rôle",
        "detail": "school_admin.controllers.personnel_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.personnel_controller",
        "description": "school_admin.controllers.personnel_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass PersonnelController:\n    \"\"\"\n    Contrôleur pour gérer le personnel administratif\n    \"\"\"\n    @staticmethod\n    def generate_numero_employe(fonction, etablissement):\n        \"\"\"\n        Génère un numéro d'employé unique basé sur le rôle et l'établissement\n        \"\"\"",
        "detail": "school_admin.controllers.personnel_controller",
        "documentation": {}
    },
    {
        "label": "ProfesseurController",
        "kind": 6,
        "importPath": "school_admin.controllers.professeur_controller",
        "description": "school_admin.controllers.professeur_controller",
        "peekOfCode": "class ProfesseurController:\n    \"\"\"\n    Contrôleur pour gérer les professeurs\n    \"\"\"\n    @staticmethod\n    def generate_numero_employe(etablissement):\n        \"\"\"\n        Génère un numéro d'employé unique pour un professeur\n        \"\"\"\n        code_etab = etablissement.code_etablissement[:3]",
        "detail": "school_admin.controllers.professeur_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.professeur_controller",
        "description": "school_admin.controllers.professeur_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass ProfesseurController:\n    \"\"\"\n    Contrôleur pour gérer les professeurs\n    \"\"\"\n    @staticmethod\n    def generate_numero_employe(etablissement):\n        \"\"\"\n        Génère un numéro d'employé unique pour un professeur\n        \"\"\"",
        "detail": "school_admin.controllers.professeur_controller",
        "documentation": {}
    },
    {
        "label": "ProspectionController",
        "kind": 6,
        "importPath": "school_admin.controllers.prospection_controller",
        "description": "school_admin.controllers.prospection_controller",
        "peekOfCode": "class ProspectionController:\n    @staticmethod\n    def ajouter_prospection(request):\n        if request.method == 'POST':\n            is_valid = True\n            field_errors = {}\n            form_data = {\n                'nom_etablissement': request.POST.get('nom_etablissement', ''),\n                'type_etablissement': request.POST.get('type_etablissement', ''),\n                'genre_etablissement': request.POST.get('genre_etablissement', ''),",
        "detail": "school_admin.controllers.prospection_controller",
        "documentation": {}
    },
    {
        "label": "SalleController",
        "kind": 6,
        "importPath": "school_admin.controllers.salle_controller",
        "description": "school_admin.controllers.salle_controller",
        "peekOfCode": "class SalleController:\n    @staticmethod\n    @login_required\n    def liste_salles(request):\n        \"\"\"Affiche la liste des salles de l'établissement\"\"\"\n        user = request.user\n        # Vérifier le type d'utilisateur\n        if isinstance(user, PersonnelAdministratif):\n            etablissement = user.etablissement\n            personnel = user",
        "detail": "school_admin.controllers.salle_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.salle_controller",
        "description": "school_admin.controllers.salle_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SalleController:\n    @staticmethod\n    @login_required\n    def liste_salles(request):\n        \"\"\"Affiche la liste des salles de l'établissement\"\"\"\n        user = request.user\n        # Vérifier le type d'utilisateur\n        if isinstance(user, PersonnelAdministratif):\n            etablissement = user.etablissement",
        "detail": "school_admin.controllers.salle_controller",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "school_admin.management.commands.generate_etablissement_codes",
        "description": "school_admin.management.commands.generate_etablissement_codes",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Génère des codes uniques pour tous les établissements existants'\n    def generate_etablissement_code(self, type_etablissement):\n        \"\"\"\n        Génère un code unique pour un établissement avec un préfixe basé sur le type\n        \"\"\"\n        # Définir le préfixe en fonction du type d'établissement\n        prefixes = {\n            'primary': 'PRI-',\n            'secondary': 'COL-',",
        "detail": "school_admin.management.commands.generate_etablissement_codes",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "school_admin.management.commands.mettre_a_jour_statuts_factures",
        "description": "school_admin.management.commands.mettre_a_jour_statuts_factures",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Met à jour automatiquement les statuts des factures basés sur les dates d\\'échéance'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--dry-run',\n            action='store_true',\n            help='Affiche les factures qui seraient mises à jour sans les modifier',\n        )\n    def handle(self, *args, **options):\n        if options['dry_run']:",
        "detail": "school_admin.management.commands.mettre_a_jour_statuts_factures",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0001_initial",
        "description": "school_admin.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompteUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "school_admin.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0002_etablissement_last_login_etablissement_password_and_more",
        "description": "school_admin.migrations.0002_etablissement_last_login_etablissement_password_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='last_login',\n            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),\n        ),",
        "detail": "school_admin.migrations.0002_etablissement_last_login_etablissement_password_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0003_prospection",
        "description": "school_admin.migrations.0003_prospection",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0002_etablissement_last_login_etablissement_password_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Prospection',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nom_etablissement', models.CharField(max_length=255, verbose_name='Nom de la prospection')),",
        "detail": "school_admin.migrations.0003_prospection",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0004_prospection_cree_par",
        "description": "school_admin.migrations.0004_prospection_cree_par",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0003_prospection'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='prospection',\n            name='cree_par',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Créé par'),\n        ),",
        "detail": "school_admin.migrations.0004_prospection_cree_par",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0005_alter_prospection_notes_commercial_and_more",
        "description": "school_admin.migrations.0005_alter_prospection_notes_commercial_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0004_prospection_cree_par'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='prospection',\n            name='notes_commercial',\n            field=models.TextField(blank=True, null=True, verbose_name='Notes de la prospection'),\n        ),",
        "detail": "school_admin.migrations.0005_alter_prospection_notes_commercial_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0006_alter_prospection_adresse_etablissement_and_more",
        "description": "school_admin.migrations.0006_alter_prospection_adresse_etablissement_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0005_alter_prospection_notes_commercial_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='prospection',\n            name='adresse_etablissement',\n            field=models.TextField(verbose_name='Adresse complète'),\n        ),",
        "detail": "school_admin.migrations.0006_alter_prospection_adresse_etablissement_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0007_prospection_notes_rendezvous",
        "description": "school_admin.migrations.0007_prospection_notes_rendezvous",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0006_alter_prospection_adresse_etablissement_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='prospection',\n            name='notes_rendezvous',\n            field=models.TextField(blank=True, null=True, verbose_name='Notes de rendez-vous'),\n        ),",
        "detail": "school_admin.migrations.0007_prospection_notes_rendezvous",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0008_notecommercial_rendezvous",
        "description": "school_admin.migrations.0008_notecommercial_rendezvous",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0007_prospection_notes_rendezvous'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='NoteCommercial',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('contenu', models.TextField(verbose_name='Contenu de la note')),",
        "detail": "school_admin.migrations.0008_notecommercial_rendezvous",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0009_compterendu",
        "description": "school_admin.migrations.0009_compterendu",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0008_notecommercial_rendezvous'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompteRendu',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('titre', models.CharField(max_length=255, verbose_name='Titre du compte rendu')),",
        "detail": "school_admin.migrations.0009_compterendu",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0010_remove_compterendu_duree_visite_and_more",
        "description": "school_admin.migrations.0010_remove_compterendu_duree_visite_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0009_compterendu'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='compterendu',\n            name='duree_visite',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0010_remove_compterendu_duree_visite_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0011_messagecommercial_reponsemessage",
        "description": "school_admin.migrations.0011_messagecommercial_reponsemessage",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0010_remove_compterendu_duree_visite_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='MessageCommercial',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('sujet', models.CharField(max_length=255, verbose_name='Sujet du message')),",
        "detail": "school_admin.migrations.0011_messagecommercial_reponsemessage",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0012_messagecommercial_date_prise_en_charge_and_more",
        "description": "school_admin.migrations.0012_messagecommercial_date_prise_en_charge_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0011_messagecommercial_reponsemessage'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='messagecommercial',\n            name='date_prise_en_charge',\n            field=models.DateTimeField(blank=True, null=True, verbose_name='Date de prise en charge'),\n        ),",
        "detail": "school_admin.migrations.0012_messagecommercial_date_prise_en_charge_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0013_alter_prospection_statut_etablissement",
        "description": "school_admin.migrations.0013_alter_prospection_statut_etablissement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0012_messagecommercial_date_prise_en_charge_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='prospection',\n            name='statut_etablissement',\n            field=models.CharField(choices=[('nouveau', 'Nouveau'), ('contacte', 'Contacté'), ('rdv_planifie', 'RDV planifié'), ('proposition', 'Proposition'), ('contrat_signe', 'Contrat signé')], max_length=255, verbose_name=\"Statut d'établissement\"),\n        ),",
        "detail": "school_admin.migrations.0013_alter_prospection_statut_etablissement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0014_prospection_genre_etablissement_and_more",
        "description": "school_admin.migrations.0014_prospection_genre_etablissement_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0013_alter_prospection_statut_etablissement'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='prospection',\n            name='genre_etablissement',\n            field=models.CharField(choices=[('public', 'Public'), ('prive', 'Privé'), ('confessionnel', 'Confessionnel')], default='', max_length=255, verbose_name=\"Genre d'établissement\"),\n            preserve_default=False,",
        "detail": "school_admin.migrations.0014_prospection_genre_etablissement_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0015_add_modules_to_etablissement",
        "description": "school_admin.migrations.0015_add_modules_to_etablissement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0014_prospection_genre_etablissement_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='module_censora',\n            field=models.BooleanField(default=False, verbose_name='Censora'),\n        ),",
        "detail": "school_admin.migrations.0015_add_modules_to_etablissement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0016_add_premium_modules_to_etablissement",
        "description": "school_admin.migrations.0016_add_premium_modules_to_etablissement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0015_add_modules_to_etablissement'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='module_activites',\n            field=models.BooleanField(default=False, verbose_name='Activités extra-scolaires'),\n        ),",
        "detail": "school_admin.migrations.0016_add_premium_modules_to_etablissement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0017_rename_censora_to_censure",
        "description": "school_admin.migrations.0017_rename_censora_to_censure",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0016_add_premium_modules_to_etablissement'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='etablissement',\n            name='module_censora',\n        ),\n        migrations.AddField(",
        "detail": "school_admin.migrations.0017_rename_censora_to_censure",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0018_rename_censure_to_sensores",
        "description": "school_admin.migrations.0018_rename_censure_to_sensores",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0017_rename_censora_to_censure'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='etablissement',\n            name='module_censure',\n        ),\n        migrations.AddField(",
        "detail": "school_admin.migrations.0018_rename_censure_to_sensores",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0019_rename_sensores_to_censeurs",
        "description": "school_admin.migrations.0019_rename_sensores_to_censeurs",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0018_rename_censure_to_sensores'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='etablissement',\n            name='module_sensores',\n        ),\n        migrations.AddField(",
        "detail": "school_admin.migrations.0019_rename_sensores_to_censeurs",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0020_alter_etablissement_managers_and_more",
        "description": "school_admin.migrations.0020_alter_etablissement_managers_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('school_admin', '0019_rename_sensores_to_censeurs'),\n    ]\n    operations = [\n        migrations.AlterModelManagers(\n            name='etablissement',\n            managers=[\n                ('objects', django.contrib.auth.models.UserManager()),",
        "detail": "school_admin.migrations.0020_alter_etablissement_managers_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0021_auto_20251002_2327",
        "description": "school_admin.migrations.0021_auto_20251002_2327",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0020_alter_etablissement_managers_and_more'),\n    ]\n    operations = [\n    ]",
        "detail": "school_admin.migrations.0021_auto_20251002_2327",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0022_alter_compteuser_groups_and_more",
        "description": "school_admin.migrations.0022_alter_compteuser_groups_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('school_admin', '0021_auto_20251002_2327'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='compteuser',\n            name='groups',\n            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='compteuser_set', related_query_name='compteuser', to='auth.group', verbose_name='groups'),",
        "detail": "school_admin.migrations.0022_alter_compteuser_groups_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0023_add_missing_abstractuser_fields",
        "description": "school_admin.migrations.0023_add_missing_abstractuser_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0022_alter_compteuser_groups_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='is_superuser',\n            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),\n        ),",
        "detail": "school_admin.migrations.0023_add_missing_abstractuser_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0024_add_etablissement_manytomany_tables",
        "description": "school_admin.migrations.0024_add_etablissement_manytomany_tables",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0023_add_missing_abstractuser_fields'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='EtablissementGroups',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('etablissement', models.ForeignKey(on_delete=CASCADE, to='school_admin.etablissement')),",
        "detail": "school_admin.migrations.0024_add_etablissement_manytomany_tables",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0025_add_personnel_administratif_model",
        "description": "school_admin.migrations.0025_add_personnel_administratif_model",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0024_add_etablissement_manytomany_tables'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='etablissementuserpermissions',\n            name='etablissement',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0025_add_personnel_administratif_model",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0026_add_personnel_administratif_model_v2",
        "description": "school_admin.migrations.0026_add_personnel_administratif_model_v2",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('school_admin', '0025_add_personnel_administratif_model'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PersonnelAdministratif',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "school_admin.migrations.0026_add_personnel_administratif_model_v2",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0027_remove_personneladministratif_date_embauche_and_more",
        "description": "school_admin.migrations.0027_remove_personneladministratif_date_embauche_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0026_add_personnel_administratif_model_v2'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='personneladministratif',\n            name='date_embauche',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0027_remove_personneladministratif_date_embauche_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0028_personneladministratif_numero_employe",
        "description": "school_admin.migrations.0028_personneladministratif_numero_employe",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0027_remove_personneladministratif_date_embauche_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='personneladministratif',\n            name='numero_employe',\n            field=models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name=\"Numéro d'employé\"),\n        ),",
        "detail": "school_admin.migrations.0028_personneladministratif_numero_employe",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0029_classe",
        "description": "school_admin.migrations.0029_classe",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0028_personneladministratif_numero_employe'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Classe',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nom', models.CharField(max_length=100, verbose_name='Nom de la classe')),",
        "detail": "school_admin.migrations.0029_classe",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0030_eleve",
        "description": "school_admin.migrations.0030_eleve",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('school_admin', '0029_classe'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Eleve',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "school_admin.migrations.0030_eleve",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0031_eleve_nom",
        "description": "school_admin.migrations.0031_eleve_nom",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0030_eleve'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='eleve',\n            name='nom',\n            field=models.CharField(default='', help_text=\"Nom de famille de l'élève\", max_length=100, verbose_name='Nom de famille'),\n            preserve_default=False,",
        "detail": "school_admin.migrations.0031_eleve_nom",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0032_remove_eleve_documents_fournis_and_more",
        "description": "school_admin.migrations.0032_remove_eleve_documents_fournis_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0031_eleve_nom'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='eleve',\n            name='documents_fournis',\n        ),\n        migrations.AddField(",
        "detail": "school_admin.migrations.0032_remove_eleve_documents_fournis_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0033_etablissement_date_derniere_facturation_and_more",
        "description": "school_admin.migrations.0033_etablissement_date_derniere_facturation_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0032_remove_eleve_documents_fournis_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='date_derniere_facturation',\n            field=models.DateTimeField(blank=True, null=True, verbose_name='Date de dernière facturation'),\n        ),",
        "detail": "school_admin.migrations.0033_etablissement_date_derniere_facturation_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0034_auto_20251004_2139",
        "description": "school_admin.migrations.0034_auto_20251004_2139",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0033_etablissement_date_derniere_facturation_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Facturation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('numero_facture', models.CharField(max_length=50, unique=True, verbose_name='Numéro de facture')),",
        "detail": "school_admin.migrations.0034_auto_20251004_2139",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0035_etablissement_montant_par_eleve_and_more",
        "description": "school_admin.migrations.0035_etablissement_montant_par_eleve_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0034_auto_20251004_2139'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='montant_par_eleve',\n            field=models.DecimalField(decimal_places=2, default=3000.0, max_digits=10, verbose_name='Montant par élève (FCFA)'),\n        ),",
        "detail": "school_admin.migrations.0035_etablissement_montant_par_eleve_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0036_alter_facturation_statut",
        "description": "school_admin.migrations.0036_alter_facturation_statut",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0035_etablissement_montant_par_eleve_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='facturation',\n            name='statut',\n            field=models.CharField(choices=[('en_attente', 'En attente de paiement'), ('paye', 'Payé'), ('en_retard', 'En retard'), ('impaye', 'Impayé'), ('contentieux', 'Contentieux'), ('annule', 'Annulé')], default='en_attente', max_length=20, verbose_name='Statut'),\n        ),",
        "detail": "school_admin.migrations.0036_alter_facturation_statut",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0037_remove_facturation_notes_and_more",
        "description": "school_admin.migrations.0037_remove_facturation_notes_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0036_alter_facturation_statut'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='facturation',\n            name='notes',\n        ),\n        migrations.AlterField(",
        "detail": "school_admin.migrations.0037_remove_facturation_notes_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0038_facturation_modules_supplementaires",
        "description": "school_admin.migrations.0038_facturation_modules_supplementaires",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0037_remove_facturation_notes_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='facturation',\n            name='modules_supplementaires',\n            field=models.JSONField(blank=True, help_text='Liste des modules supplémentaires sélectionnés', null=True, verbose_name='Modules supplémentaires'),\n        ),",
        "detail": "school_admin.migrations.0038_facturation_modules_supplementaires",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0039_remove_facturation_modules_supplementaires_and_more",
        "description": "school_admin.migrations.0039_remove_facturation_modules_supplementaires_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0038_facturation_modules_supplementaires'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='facturation',\n            name='modules_supplementaires',\n        ),\n        migrations.AddField(",
        "detail": "school_admin.migrations.0039_remove_facturation_modules_supplementaires_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0040_facturation_date_echeance_reste_and_more",
        "description": "school_admin.migrations.0040_facturation_date_echeance_reste_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0039_remove_facturation_modules_supplementaires_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='facturation',\n            name='date_echeance_reste',\n            field=models.DateTimeField(blank=True, null=True, verbose_name=\"Date d'échéance du reste à payer\"),\n        ),",
        "detail": "school_admin.migrations.0040_facturation_date_echeance_reste_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0041_facturation_paiement_partiel",
        "description": "school_admin.migrations.0041_facturation_paiement_partiel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0040_facturation_date_echeance_reste_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='facturation',\n            name='paiement_partiel',\n            field=models.BooleanField(default=False, verbose_name='Paiement partiel'),\n        ),",
        "detail": "school_admin.migrations.0041_facturation_paiement_partiel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0042_facturation_statut_envoi",
        "description": "school_admin.migrations.0042_facturation_statut_envoi",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0041_facturation_paiement_partiel'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='facturation',\n            name='statut_envoi',\n            field=models.BooleanField(default=False, verbose_name=\"Statut d'envoi\"),\n        ),",
        "detail": "school_admin.migrations.0042_facturation_statut_envoi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0043_add_montant_verse_to_facturation",
        "description": "school_admin.migrations.0043_add_montant_verse_to_facturation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0042_facturation_statut_envoi'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='facturation',\n            name='montant_verse',\n            field=models.DecimalField(decimal_places=2, default=0.0, max_digits=10, verbose_name='Montant versé'),\n        ),",
        "detail": "school_admin.migrations.0043_add_montant_verse_to_facturation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0044_alter_personneladministratif_date_joined_and_more",
        "description": "school_admin.migrations.0044_alter_personneladministratif_date_joined_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0043_add_montant_verse_to_facturation'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='personneladministratif',\n            name='date_joined',\n            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name=\"Date d'inscription\"),\n        ),",
        "detail": "school_admin.migrations.0044_alter_personneladministratif_date_joined_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0045_alter_eleve_date_joined_alter_eleve_last_login_and_more",
        "description": "school_admin.migrations.0045_alter_eleve_date_joined_alter_eleve_last_login_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0044_alter_personneladministratif_date_joined_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='eleve',\n            name='date_joined',\n            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name=\"Date d'inscription\"),\n        ),",
        "detail": "school_admin.migrations.0045_alter_eleve_date_joined_alter_eleve_last_login_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0046_alter_eleve_date_joined_alter_eleve_last_login_and_more",
        "description": "school_admin.migrations.0046_alter_eleve_date_joined_alter_eleve_last_login_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0045_alter_eleve_date_joined_alter_eleve_last_login_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='eleve',\n            name='date_joined',\n            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),\n        ),",
        "detail": "school_admin.migrations.0046_alter_eleve_date_joined_alter_eleve_last_login_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0047_alter_eleve_adresse_and_more",
        "description": "school_admin.migrations.0047_alter_eleve_adresse_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0046_alter_eleve_date_joined_alter_eleve_last_login_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='eleve',\n            name='adresse',\n            field=models.TextField(blank=True, help_text=\"Adresse de résidence de l'élève (optionnel)\", null=True, verbose_name='Adresse'),\n        ),",
        "detail": "school_admin.migrations.0047_alter_eleve_adresse_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0048_remove_eleve_email_mere_remove_eleve_email_pere_and_more",
        "description": "school_admin.migrations.0048_remove_eleve_email_mere_remove_eleve_email_pere_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0047_alter_eleve_adresse_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='eleve',\n            name='email_mere',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0048_remove_eleve_email_mere_remove_eleve_email_pere_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0049_simplify_parent_tuteur",
        "description": "school_admin.migrations.0049_simplify_parent_tuteur",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0048_remove_eleve_email_mere_remove_eleve_email_pere_and_more'),\n    ]\n    operations = [\n        # Ajouter les nouveaux champs\n        migrations.AddField(\n            model_name='eleve',\n            name='parent_nom',\n            field=models.CharField(max_length=100, verbose_name=\"Nom du parent/tuteur\", help_text=\"Nom de famille du parent ou tuteur\"),",
        "detail": "school_admin.migrations.0049_simplify_parent_tuteur",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0050_depense",
        "description": "school_admin.migrations.0050_depense",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0049_simplify_parent_tuteur'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Depense',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('description', models.CharField(help_text='Description de la dépense', max_length=200, verbose_name='Description')),",
        "detail": "school_admin.migrations.0050_depense",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0051_remove_depense_reference_paiement",
        "description": "school_admin.migrations.0051_remove_depense_reference_paiement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0050_depense'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='depense',\n            name='reference_paiement',\n        ),\n    ]",
        "detail": "school_admin.migrations.0051_remove_depense_reference_paiement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0052_remove_depense_mode_paiement",
        "description": "school_admin.migrations.0052_remove_depense_mode_paiement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0051_remove_depense_reference_paiement'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='depense',\n            name='mode_paiement',\n        ),\n    ]",
        "detail": "school_admin.migrations.0052_remove_depense_mode_paiement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0053_budget",
        "description": "school_admin.migrations.0053_budget",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0052_remove_depense_mode_paiement'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nom', models.CharField(help_text='Nom ou description du budget', max_length=200, verbose_name='Nom du budget')),",
        "detail": "school_admin.migrations.0053_budget",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0054_professeur",
        "description": "school_admin.migrations.0054_professeur",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('school_admin', '0053_budget'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Professeur',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "school_admin.migrations.0054_professeur",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0055_remove_professeur_cv_remove_professeur_diplomes_and_more",
        "description": "school_admin.migrations.0055_remove_professeur_cv_remove_professeur_diplomes_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0054_professeur'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='professeur',\n            name='cv',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0055_remove_professeur_cv_remove_professeur_diplomes_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0056_alter_professeur_username",
        "description": "school_admin.migrations.0056_alter_professeur_username",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0055_remove_professeur_cv_remove_professeur_diplomes_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='professeur',\n            name='username',\n            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),\n        ),",
        "detail": "school_admin.migrations.0056_alter_professeur_username",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0057_matiere",
        "description": "school_admin.migrations.0057_matiere",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0056_alter_professeur_username'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Matiere',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nom', models.CharField(max_length=100, verbose_name='Nom de la matière')),",
        "detail": "school_admin.migrations.0057_matiere",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0058_alter_matiere_options_alter_matiere_unique_together_and_more",
        "description": "school_admin.migrations.0058_alter_matiere_options_alter_matiere_unique_together_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0057_matiere'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='matiere',\n            options={'ordering': ['nom'], 'verbose_name': 'Matière', 'verbose_name_plural': 'Matières'},\n        ),\n        migrations.AlterUniqueTogether(",
        "detail": "school_admin.migrations.0058_alter_matiere_options_alter_matiere_unique_together_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0059_remove_matiere_couleur_remove_matiere_heures_semaine",
        "description": "school_admin.migrations.0059_remove_matiere_couleur_remove_matiere_heures_semaine",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0058_alter_matiere_options_alter_matiere_unique_together_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='matiere',\n            name='couleur',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0059_remove_matiere_couleur_remove_matiere_heures_semaine",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0060_alter_professeur_matiere_principale_and_more",
        "description": "school_admin.migrations.0060_alter_professeur_matiere_principale_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0059_remove_matiere_couleur_remove_matiere_heures_semaine'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='professeur',\n            name='matiere_principale',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professeurs_principaux', to='school_admin.matiere', verbose_name='Matière principale'),\n        ),",
        "detail": "school_admin.migrations.0060_alter_professeur_matiere_principale_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0061_professeur_classes",
        "description": "school_admin.migrations.0061_professeur_classes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0060_alter_professeur_matiere_principale_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='professeur',\n            name='classes',\n            field=models.ManyToManyField(blank=True, related_name='professeurs', to='school_admin.classe', verbose_name='Classes affectées'),\n        ),",
        "detail": "school_admin.migrations.0061_professeur_classes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0062_affectationprofesseur",
        "description": "school_admin.migrations.0062_affectationprofesseur",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0061_professeur_classes'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AffectationProfesseur',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('statut', models.CharField(choices=[('principal', 'Professeur Principal'), ('classique', 'Professeur Classique')], default='classique', max_length=20, verbose_name='Statut')),",
        "detail": "school_admin.migrations.0062_affectationprofesseur",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0063_salle",
        "description": "school_admin.migrations.0063_salle",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0062_affectationprofesseur'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Salle',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nom', models.CharField(max_length=100, verbose_name='Nom de la salle')),",
        "detail": "school_admin.migrations.0063_salle",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0064_remove_salle_description_remove_salle_equipements_and_more",
        "description": "school_admin.migrations.0064_remove_salle_description_remove_salle_equipements_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0063_salle'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='salle',\n            name='description',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0064_remove_salle_description_remove_salle_equipements_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0065_affectationsalle",
        "description": "school_admin.migrations.0065_affectationsalle",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0064_remove_salle_description_remove_salle_equipements_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AffectationSalle',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('jour_semaine', models.CharField(choices=[('lundi', 'Lundi'), ('mardi', 'Mardi'), ('mercredi', 'Mercredi'), ('jeudi', 'Jeudi'), ('vendredi', 'Vendredi'), ('samedi', 'Samedi'), ('dimanche', 'Dimanche')], max_length=10, verbose_name='Jour de la semaine')),",
        "detail": "school_admin.migrations.0065_affectationsalle",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0066_remove_date_fields_from_affectation_salle",
        "description": "school_admin.migrations.0066_remove_date_fields_from_affectation_salle",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0065_affectationsalle'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='affectationsalle',\n            name='date_debut',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0066_remove_date_fields_from_affectation_salle",
        "documentation": {}
    },
    {
        "label": "AffectationProfesseur",
        "kind": 6,
        "importPath": "school_admin.model.affectation_model",
        "description": "school_admin.model.affectation_model",
        "peekOfCode": "class AffectationProfesseur(models.Model):\n    \"\"\"\n    Modèle pour gérer les affectations des professeurs aux classes avec statut\n    \"\"\"\n    STATUT_CHOICES = [\n        ('principal', 'Professeur Principal'),\n        ('classique', 'Professeur Classique'),\n    ]\n    professeur = models.ForeignKey(\n        Professeur,",
        "detail": "school_admin.model.affectation_model",
        "documentation": {}
    },
    {
        "label": "AffectationSalle",
        "kind": 6,
        "importPath": "school_admin.model.affectation_salle_model",
        "description": "school_admin.model.affectation_salle_model",
        "peekOfCode": "class AffectationSalle(models.Model):\n    \"\"\"Modèle pour gérer les affectations des salles aux classes\"\"\"\n    JOUR_SEMAINE_CHOICES = [\n        ('lundi', 'Lundi'),\n        ('mardi', 'Mardi'),\n        ('mercredi', 'Mercredi'),\n        ('jeudi', 'Jeudi'),\n        ('vendredi', 'Vendredi'),\n        ('samedi', 'Samedi'),\n        ('dimanche', 'Dimanche'),",
        "detail": "school_admin.model.affectation_salle_model",
        "documentation": {}
    },
    {
        "label": "Budget",
        "kind": 6,
        "importPath": "school_admin.model.budget_model",
        "description": "school_admin.model.budget_model",
        "peekOfCode": "class Budget(models.Model):\n    \"\"\"\n    Modèle pour gérer les budgets par catégorie\n    \"\"\"\n    CATEGORIE_CHOICES = [\n        ('personnel', 'Personnel'),\n        ('equipement', 'Équipement'),\n        ('maintenance', 'Maintenance'),\n        ('formation', 'Formation'),\n        ('marketing', 'Marketing'),",
        "detail": "school_admin.model.budget_model",
        "documentation": {}
    },
    {
        "label": "Classe",
        "kind": 6,
        "importPath": "school_admin.model.classe_model",
        "description": "school_admin.model.classe_model",
        "peekOfCode": "class Classe(models.Model):\n    \"\"\"\n    Modèle représentant une classe dans un établissement\n    \"\"\"\n    NIVEAU_CHOICES = [\n        ('maternelle', 'Maternelle'),\n        ('primaire', 'Primaire'),\n        ('college', 'Collège'),\n        ('lycee', 'Lycée'),\n        ('superieur', 'Supérieur'),",
        "detail": "school_admin.model.classe_model",
        "documentation": {}
    },
    {
        "label": "CompteRendu",
        "kind": 6,
        "importPath": "school_admin.model.compte_rendu_model",
        "description": "school_admin.model.compte_rendu_model",
        "peekOfCode": "class CompteRendu(models.Model):\n    \"\"\"\n    Modèle pour les comptes rendus de visite liés à un établissement\n    \"\"\"\n    # On crée le champ \"etablissement\" de type foreign key et on importe le modèle Prospection\n    etablissement = models.ForeignKey(\n        'school_admin.Prospection', # On importe le modèle Prospection\n        on_delete=models.CASCADE, # On supprime le compte rendu si l'établissement est supprimé\n        related_name='comptes_rendus', # On nomme la relation \"comptes_rendus\"\n        verbose_name=\"Établissement\" # On nomme le champ \"Établissement\"",
        "detail": "school_admin.model.compte_rendu_model",
        "documentation": {}
    },
    {
        "label": "CompteUser",
        "kind": 6,
        "importPath": "school_admin.model.compte_user",
        "description": "school_admin.model.compte_user",
        "peekOfCode": "class CompteUser(AbstractUser):\n    # Champs personnalisés\n    TYPE_COMPTE_CHOICES = [\n        ('administrateur', 'Administrateur'),\n        ('membre', 'Membre de l\\'équipe'),\n    ]\n    DEPARTEMENT_CHOICES = [\n        ('technique', 'Technique'),\n        ('support', 'Support Client'),\n        ('commercial', 'Commercial & Ventes'),",
        "detail": "school_admin.model.compte_user",
        "documentation": {}
    },
    {
        "label": "Depense",
        "kind": 6,
        "importPath": "school_admin.model.depense_model",
        "description": "school_admin.model.depense_model",
        "peekOfCode": "class Depense(models.Model):\n    \"\"\"\n    Modèle pour gérer les dépenses de l'organisation\n    \"\"\"\n    CATEGORIE_CHOICES = [\n        ('personnel', 'Personnel'),\n        ('equipement', 'Équipement'),\n        ('maintenance', 'Maintenance'),\n        ('formation', 'Formation'),\n        ('marketing', 'Marketing'),",
        "detail": "school_admin.model.depense_model",
        "documentation": {}
    },
    {
        "label": "Eleve",
        "kind": 6,
        "importPath": "school_admin.model.eleve_model",
        "description": "school_admin.model.eleve_model",
        "peekOfCode": "class Eleve(AbstractUser):\n    \"\"\"\n    Modèle pour les élèves de l'établissement\n    Hérite d'AbstractUser pour permettre la connexion\n    \"\"\"\n    # Champs personnels\n    nom = models.CharField(\n        max_length=100,\n        verbose_name=\"Nom de famille\",\n        help_text=\"Nom de famille de l'élève\"",
        "detail": "school_admin.model.eleve_model",
        "documentation": {}
    },
    {
        "label": "Etablissement",
        "kind": 6,
        "importPath": "school_admin.model.etablissement_model",
        "description": "school_admin.model.etablissement_model",
        "peekOfCode": "class Etablissement(AbstractUser):\n    \"\"\"\n    Modèle représentant un établissement scolaire\n    \"\"\"\n    TYPE_CHOICES = [\n        ('primary', 'École Primaire'),\n        ('collège', 'Collège'),\n        ('lycée', 'Lycée'),\n    ]\n    # Code unique de l'établissement",
        "detail": "school_admin.model.etablissement_model",
        "documentation": {}
    },
    {
        "label": "Facturation",
        "kind": 6,
        "importPath": "school_admin.model.facturation_model",
        "description": "school_admin.model.facturation_model",
        "peekOfCode": "class Facturation(models.Model):\n    \"\"\"\n    Modèle pour gérer la facturation des services de gestion scolaire\n    \"\"\"\n    STATUT_CHOICES = [\n        ('en_attente', 'En attente de paiement'),\n        ('paye', 'Payé'),\n        ('en_retard', 'En retard'),\n        ('impaye', 'Impayé'),\n        ('contentieux', 'Contentieux'),",
        "detail": "school_admin.model.facturation_model",
        "documentation": {}
    },
    {
        "label": "Matiere",
        "kind": 6,
        "importPath": "school_admin.model.matiere_model",
        "description": "school_admin.model.matiere_model",
        "peekOfCode": "class Matiere(models.Model):\n    \"\"\"\n    Modèle pour les matières enseignées dans l'établissement\n    \"\"\"\n    # Types de matières\n    TYPE_MATIERE_CHOICES = [\n        ('obligatoire', 'Matière obligatoire'),\n        ('optionnelle', 'Matière optionnelle'),\n        ('facultative', 'Matière facultative'),\n        ('sport', 'Éducation physique et sportive'),",
        "detail": "school_admin.model.matiere_model",
        "documentation": {}
    },
    {
        "label": "MessageCommercial",
        "kind": 6,
        "importPath": "school_admin.model.message_model",
        "description": "school_admin.model.message_model",
        "peekOfCode": "class MessageCommercial(models.Model):\n    \"\"\"\n    Modèle pour les messages commerciaux\n    \"\"\"\n    # Types de messages\n    TYPE_MESSAGE_CHOICES = [\n        ('demande_info', 'Demande d\\'information'),\n        ('proposition', 'Proposition commerciale'),\n        ('suivi', 'Suivi de prospection'),\n        ('rendez_vous', 'Rendez-vous'),",
        "detail": "school_admin.model.message_model",
        "documentation": {}
    },
    {
        "label": "ReponseMessage",
        "kind": 6,
        "importPath": "school_admin.model.message_model",
        "description": "school_admin.model.message_model",
        "peekOfCode": "class ReponseMessage(models.Model):\n    \"\"\"\n    Modèle pour les réponses aux messages\n    \"\"\"\n    message_original = models.ForeignKey(\n        MessageCommercial,\n        on_delete=models.CASCADE,\n        related_name='reponses',\n        verbose_name=\"Message original\"\n    )",
        "detail": "school_admin.model.message_model",
        "documentation": {}
    },
    {
        "label": "NoteCommercial",
        "kind": 6,
        "importPath": "school_admin.model.note_commercial_model",
        "description": "school_admin.model.note_commercial_model",
        "peekOfCode": "class NoteCommercial(models.Model):\n    \"\"\"\n    Modèle pour les notes commerciales liées à un établissement\n    \"\"\"\n    # On importe le modèle Prospection\n    etablissement = models.ForeignKey(\n        'school_admin.Prospection', # On importe le modèle Prospection\n        on_delete=models.CASCADE, # On supprime la note si l'établissement est supprimé\n        related_name='notes_commerciales', # On nomme la relation \"notes_commerciales\"\n        verbose_name=\"Établissement\" # On nomme le champ \"Établissement\"",
        "detail": "school_admin.model.note_commercial_model",
        "documentation": {}
    },
    {
        "label": "PersonnelAdministratif",
        "kind": 6,
        "importPath": "school_admin.model.personnel_administratif_model",
        "description": "school_admin.model.personnel_administratif_model",
        "peekOfCode": "class PersonnelAdministratif(AbstractUser):\n    \"\"\"\n    Modèle représentant le personnel administratif d'un établissement\n    \"\"\"\n    TYPE_FONCTION_CHOICES = [\n        ('secretaire', 'Secrétaire / Service de scolarité'),\n        ('surveillant_general', 'Surveillant Général (SG)'),\n        ('censeur', 'Censeur'),\n        ('administrateur', 'Administrateur'),\n    ]",
        "detail": "school_admin.model.personnel_administratif_model",
        "documentation": {}
    },
    {
        "label": "Professeur",
        "kind": 6,
        "importPath": "school_admin.model.professeur_model",
        "description": "school_admin.model.professeur_model",
        "peekOfCode": "class Professeur(AbstractUser):\n    \"\"\"\n    Modèle pour les professeurs de l'établissement\n    \"\"\"\n    # Types de matières enseignées\n    MATIERE_CHOICES = [\n        ('mathematiques', 'Mathématiques'),\n        ('francais', 'Français'),\n        ('anglais', 'Anglais'),\n        ('histoire_geo', 'Histoire-Géographie'),",
        "detail": "school_admin.model.professeur_model",
        "documentation": {}
    },
    {
        "label": "Prospection",
        "kind": 6,
        "importPath": "school_admin.model.prospection_model",
        "description": "school_admin.model.prospection_model",
        "peekOfCode": "class Prospection(models.Model):\n    # On crée le champ \"type_etablissement\" de type choix\n    TYPE_CHOICES = [\n        ('primaire', 'École primaire'),\n        ('college', 'Collège'),\n        ('lycee', 'Lycée'),\n        ('universite', 'Université'),\n        ('autre', 'Autre'),\n    ]\n    # On crée le champ \"genre_etablissement\" de type choix",
        "detail": "school_admin.model.prospection_model",
        "documentation": {}
    },
    {
        "label": "RendezVous",
        "kind": 6,
        "importPath": "school_admin.model.rendez_vous_model",
        "description": "school_admin.model.rendez_vous_model",
        "peekOfCode": "class RendezVous(models.Model):\n    \"\"\"\n    Modèle pour les rendez-vous liés à un établissement\n    \"\"\"\n    # On crée le champ \"type_rdv\" de type choix\n    TYPE_RDV_CHOICES = [\n        ('appel_telephonique', 'Appel téléphonique'),\n        ('visite_site', 'Visite sur site'),\n        ('presentation_online', 'Présentation en ligne'),\n        ('dejeuner_affaires', 'Déjeuner d\\'affaires'),",
        "detail": "school_admin.model.rendez_vous_model",
        "documentation": {}
    },
    {
        "label": "Salle",
        "kind": 6,
        "importPath": "school_admin.model.salle_model",
        "description": "school_admin.model.salle_model",
        "peekOfCode": "class Salle(models.Model):\n    \"\"\"Modèle pour représenter une salle dans l'établissement\"\"\"\n    TYPE_SALLE_CHOICES = [\n        ('classe', 'Salle de Classe'),\n        ('laboratoire', 'Laboratoire'),\n        ('bibliotheque', 'Bibliothèque'),\n        ('salle_informatique', 'Salle d\\'Informatique'),\n        ('salle_art', 'Salle d\\'Arts'),\n        ('salle_musique', 'Salle de Musique'),\n        ('salle_sport', 'Salle de Sport'),",
        "detail": "school_admin.model.salle_model",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.administrateur_etablissement_url",
        "description": "school_admin.personal_url.administrateur_etablissement_url",
        "peekOfCode": "app_name = 'administrateur_etablissement'\nurlpatterns = [\n    path('dashboard/administrateur_etablissement/', dashboard_administrateur_etablissement, name='dashboard_administrateur_etablissement'),\n    # URLs pour la gestion des classes\n    path('classes/', ClasseController.liste_classes, name='liste_classes'),\n    path('classes/ajouter/', ClasseController.ajouter_classe, name='ajouter_classe'),\n    path('classes/<int:classe_id>/', ClasseController.detail_classe, name='detail_classe'),\n    path('classes/<int:classe_id>/toggle/', ClasseController.toggle_actif, name='toggle_actif'),\n]",
        "detail": "school_admin.personal_url.administrateur_etablissement_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.administrateur_etablissement_url",
        "description": "school_admin.personal_url.administrateur_etablissement_url",
        "peekOfCode": "urlpatterns = [\n    path('dashboard/administrateur_etablissement/', dashboard_administrateur_etablissement, name='dashboard_administrateur_etablissement'),\n    # URLs pour la gestion des classes\n    path('classes/', ClasseController.liste_classes, name='liste_classes'),\n    path('classes/ajouter/', ClasseController.ajouter_classe, name='ajouter_classe'),\n    path('classes/<int:classe_id>/', ClasseController.detail_classe, name='detail_classe'),\n    path('classes/<int:classe_id>/toggle/', ClasseController.toggle_actif, name='toggle_actif'),\n]",
        "detail": "school_admin.personal_url.administrateur_etablissement_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.affectation_salle_url",
        "description": "school_admin.personal_url.affectation_salle_url",
        "peekOfCode": "app_name = 'affectation_salle'\nurlpatterns = [\n    path('affectations-salles/', AffectationSalleController.liste_affectations, name='liste_affectations'),\n    path('affectations-salles/ajouter/', AffectationSalleController.ajouter_affectation, name='ajouter_affectation'),\n    path('affectations-salles/<int:affectation_id>/', AffectationSalleController.detail_affectation, name='detail_affectation'),\n    path('affectations-salles/<int:affectation_id>/modifier/', AffectationSalleController.modifier_affectation, name='modifier_affectation'),\n    path('affectations-salles/<int:affectation_id>/supprimer/', AffectationSalleController.supprimer_affectation, name='supprimer_affectation'),\n    path('affectations-salles/<int:affectation_id>/toggle/', AffectationSalleController.toggle_actif, name='toggle_actif'),\n    path('api/disponibilites-salle/', AffectationSalleController.get_disponibilites_salle, name='get_disponibilites_salle'),\n]",
        "detail": "school_admin.personal_url.affectation_salle_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.affectation_salle_url",
        "description": "school_admin.personal_url.affectation_salle_url",
        "peekOfCode": "urlpatterns = [\n    path('affectations-salles/', AffectationSalleController.liste_affectations, name='liste_affectations'),\n    path('affectations-salles/ajouter/', AffectationSalleController.ajouter_affectation, name='ajouter_affectation'),\n    path('affectations-salles/<int:affectation_id>/', AffectationSalleController.detail_affectation, name='detail_affectation'),\n    path('affectations-salles/<int:affectation_id>/modifier/', AffectationSalleController.modifier_affectation, name='modifier_affectation'),\n    path('affectations-salles/<int:affectation_id>/supprimer/', AffectationSalleController.supprimer_affectation, name='supprimer_affectation'),\n    path('affectations-salles/<int:affectation_id>/toggle/', AffectationSalleController.toggle_actif, name='toggle_actif'),\n    path('api/disponibilites-salle/', AffectationSalleController.get_disponibilites_salle, name='get_disponibilites_salle'),\n]",
        "detail": "school_admin.personal_url.affectation_salle_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.affectation_url",
        "description": "school_admin.personal_url.affectation_url",
        "peekOfCode": "app_name = 'affectation'\nurlpatterns = [\n    path('affectation/professeurs/', AffectationController.affectation_professeurs, name='affectation_professeurs'),\n    path('affectation/affecter/', AffectationController.affecter_professeur, name='affecter_professeur'),\n    path('affectation/professeur/<int:professeur_id>/affectations/', AffectationController.get_affectations_professeur, name='get_affectations_professeur'),\n]",
        "detail": "school_admin.personal_url.affectation_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.affectation_url",
        "description": "school_admin.personal_url.affectation_url",
        "peekOfCode": "urlpatterns = [\n    path('affectation/professeurs/', AffectationController.affectation_professeurs, name='affectation_professeurs'),\n    path('affectation/affecter/', AffectationController.affecter_professeur, name='affecter_professeur'),\n    path('affectation/professeur/<int:professeur_id>/affectations/', AffectationController.get_affectations_professeur, name='get_affectations_professeur'),\n]",
        "detail": "school_admin.personal_url.affectation_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.directeur_url",
        "description": "school_admin.personal_url.directeur_url",
        "peekOfCode": "app_name = 'directeur'  # ← Changement du namespace pour éviter le conflit\nurlpatterns = [\n    path('dashboard/directeur/', dashboard_directeur, name='dashboard_directeur'),\n    path('facturation/directeur/', facturation_directeur, name='facturation_directeur'),\n    path('gestion-pedagogique/', gestion_pedagogique, name='gestion_pedagogique'),\n    path('gestion-eleves/', gestion_eleves, name='gestion_eleves'),\n    path('gestion-etablissement/', gestion_etablissement, name='gestion_etablissement'),\n]",
        "detail": "school_admin.personal_url.directeur_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.directeur_url",
        "description": "school_admin.personal_url.directeur_url",
        "peekOfCode": "urlpatterns = [\n    path('dashboard/directeur/', dashboard_directeur, name='dashboard_directeur'),\n    path('facturation/directeur/', facturation_directeur, name='facturation_directeur'),\n    path('gestion-pedagogique/', gestion_pedagogique, name='gestion_pedagogique'),\n    path('gestion-eleves/', gestion_eleves, name='gestion_eleves'),\n    path('gestion-etablissement/', gestion_etablissement, name='gestion_etablissement'),\n]",
        "detail": "school_admin.personal_url.directeur_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.matiere_url",
        "description": "school_admin.personal_url.matiere_url",
        "peekOfCode": "app_name = 'matiere'\nurlpatterns = [\n    path('matieres/', MatiereController.liste_matieres, name='liste_matieres'),\n    path('matieres/ajouter/', MatiereController.ajouter_matiere, name='ajouter_matiere'),\n    path('matieres/<int:matiere_id>/', MatiereController.detail_matiere, name='detail_matiere'),\n    path('matieres/<int:matiere_id>/toggle/', MatiereController.toggle_actif, name='toggle_actif'),\n    path('matieres/<int:matiere_id>/supprimer/', MatiereController.supprimer_matiere, name='supprimer_matiere'),\n]",
        "detail": "school_admin.personal_url.matiere_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.matiere_url",
        "description": "school_admin.personal_url.matiere_url",
        "peekOfCode": "urlpatterns = [\n    path('matieres/', MatiereController.liste_matieres, name='liste_matieres'),\n    path('matieres/ajouter/', MatiereController.ajouter_matiere, name='ajouter_matiere'),\n    path('matieres/<int:matiere_id>/', MatiereController.detail_matiere, name='detail_matiere'),\n    path('matieres/<int:matiere_id>/toggle/', MatiereController.toggle_actif, name='toggle_actif'),\n    path('matieres/<int:matiere_id>/supprimer/', MatiereController.supprimer_matiere, name='supprimer_matiere'),\n]",
        "detail": "school_admin.personal_url.matiere_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.personnel_administratif_url",
        "description": "school_admin.personal_url.personnel_administratif_url",
        "peekOfCode": "app_name = 'personnel_administratif'\nurlpatterns = [\n    path('', dashboard_personnel_administratif, name='dashboard_personnel_administratif'),\n    path('profil/', profil_personnel_administratif, name='profil'),\n    path('eleves/', liste_eleves_personnel, name='liste_eleves'),\n    path('enseignants/', liste_enseignants_personnel, name='liste_enseignants'),\n]",
        "detail": "school_admin.personal_url.personnel_administratif_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.personnel_administratif_url",
        "description": "school_admin.personal_url.personnel_administratif_url",
        "peekOfCode": "urlpatterns = [\n    path('', dashboard_personnel_administratif, name='dashboard_personnel_administratif'),\n    path('profil/', profil_personnel_administratif, name='profil'),\n    path('eleves/', liste_eleves_personnel, name='liste_eleves'),\n    path('enseignants/', liste_enseignants_personnel, name='liste_enseignants'),\n]",
        "detail": "school_admin.personal_url.personnel_administratif_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.personnel_url",
        "description": "school_admin.personal_url.personnel_url",
        "peekOfCode": "app_name = 'personnel'\nurlpatterns = [\n    path('personnel/', PersonnelController.liste_personnel, name='liste_personnel'),\n    path('personnel/ajouter/', PersonnelController.ajouter_personnel, name='ajouter_personnel'),\n    path('personnel/<int:personnel_id>/', PersonnelController.detail_personnel, name='detail_personnel'),\n    path('personnel/<int:personnel_id>/toggle/', PersonnelController.toggle_actif, name='toggle_actif'),\n]",
        "detail": "school_admin.personal_url.personnel_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.personnel_url",
        "description": "school_admin.personal_url.personnel_url",
        "peekOfCode": "urlpatterns = [\n    path('personnel/', PersonnelController.liste_personnel, name='liste_personnel'),\n    path('personnel/ajouter/', PersonnelController.ajouter_personnel, name='ajouter_personnel'),\n    path('personnel/<int:personnel_id>/', PersonnelController.detail_personnel, name='detail_personnel'),\n    path('personnel/<int:personnel_id>/toggle/', PersonnelController.toggle_actif, name='toggle_actif'),\n]",
        "detail": "school_admin.personal_url.personnel_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.professeur_url",
        "description": "school_admin.personal_url.professeur_url",
        "peekOfCode": "app_name = 'professeur'\nurlpatterns = [\n    path('professeurs/', ProfesseurController.liste_professeurs, name='liste_professeurs'),\n    path('professeurs/ajouter/', ProfesseurController.ajouter_professeur, name='ajouter_professeur'),\n    path('professeurs/<int:professeur_id>/', ProfesseurController.detail_professeur, name='detail_professeur'),\n    path('professeurs/<int:professeur_id>/toggle/', ProfesseurController.toggle_actif, name='toggle_actif'),\n]",
        "detail": "school_admin.personal_url.professeur_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.professeur_url",
        "description": "school_admin.personal_url.professeur_url",
        "peekOfCode": "urlpatterns = [\n    path('professeurs/', ProfesseurController.liste_professeurs, name='liste_professeurs'),\n    path('professeurs/ajouter/', ProfesseurController.ajouter_professeur, name='ajouter_professeur'),\n    path('professeurs/<int:professeur_id>/', ProfesseurController.detail_professeur, name='detail_professeur'),\n    path('professeurs/<int:professeur_id>/toggle/', ProfesseurController.toggle_actif, name='toggle_actif'),\n]",
        "detail": "school_admin.personal_url.professeur_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.salle_url",
        "description": "school_admin.personal_url.salle_url",
        "peekOfCode": "app_name = 'salle'\nurlpatterns = [\n    path('salles/', SalleController.liste_salles, name='liste_salles'),\n    path('salles/ajouter/', SalleController.ajouter_salle, name='ajouter_salle'),\n    path('salles/<int:salle_id>/', SalleController.detail_salle, name='detail_salle'),\n    path('salles/<int:salle_id>/toggle/', SalleController.toggle_actif, name='toggle_actif'),\n    path('salles/<int:salle_id>/modifier/', SalleController.modifier_salle, name='modifier_salle'),\n]",
        "detail": "school_admin.personal_url.salle_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.salle_url",
        "description": "school_admin.personal_url.salle_url",
        "peekOfCode": "urlpatterns = [\n    path('salles/', SalleController.liste_salles, name='liste_salles'),\n    path('salles/ajouter/', SalleController.ajouter_salle, name='ajouter_salle'),\n    path('salles/<int:salle_id>/', SalleController.detail_salle, name='detail_salle'),\n    path('salles/<int:salle_id>/toggle/', SalleController.toggle_actif, name='toggle_actif'),\n    path('salles/<int:salle_id>/modifier/', SalleController.modifier_salle, name='modifier_salle'),\n]",
        "detail": "school_admin.personal_url.salle_url",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.secretaire_url",
        "description": "school_admin.personal_url.secretaire_url",
        "peekOfCode": "app_name = 'secretaire'\nurlpatterns = [\n    path('dashboard/secretaire/', dashboard_secretaire, name='dashboard_secretaire'),\n    path('inscription/eleves/', inscription_eleves, name='inscription_eleves'),\n    path('liste/eleves/', liste_eleves, name='liste_eleves'),\n    path('detail/eleve/<int:eleve_id>/', detail_eleve, name='detail_eleve'),\n    path('transfer/eleve/<int:eleve_id>/', transfer_eleve, name='transfer_eleve'),\n    path('reçu/eleve/<int:eleve_id>/', reçu_inscription_eleve, name='reçu_inscription_eleve'),\n    path('supprimer/eleve/<int:eleve_id>/', supprimer_eleve, name='supprimer_eleve'),\n    path('synchroniser/facturation/', synchroniser_facturation, name='synchroniser_facturation'),",
        "detail": "school_admin.personal_url.secretaire_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.secretaire_url",
        "description": "school_admin.personal_url.secretaire_url",
        "peekOfCode": "urlpatterns = [\n    path('dashboard/secretaire/', dashboard_secretaire, name='dashboard_secretaire'),\n    path('inscription/eleves/', inscription_eleves, name='inscription_eleves'),\n    path('liste/eleves/', liste_eleves, name='liste_eleves'),\n    path('detail/eleve/<int:eleve_id>/', detail_eleve, name='detail_eleve'),\n    path('transfer/eleve/<int:eleve_id>/', transfer_eleve, name='transfer_eleve'),\n    path('reçu/eleve/<int:eleve_id>/', reçu_inscription_eleve, name='reçu_inscription_eleve'),\n    path('supprimer/eleve/<int:eleve_id>/', supprimer_eleve, name='supprimer_eleve'),\n    path('synchroniser/facturation/', synchroniser_facturation, name='synchroniser_facturation'),\n    # Gestion des classes",
        "detail": "school_admin.personal_url.secretaire_url",
        "documentation": {}
    },
    {
        "label": "dashboard_administrateur_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_etablissement_view",
        "description": "school_admin.personal_views.administrateur_etablissement_view",
        "peekOfCode": "def dashboard_administrateur_etablissement(request):\n    \"\"\"\n    Dashboard pour l'administrateur d'établissement\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est du personnel administratif\n    if not isinstance(user, PersonnelAdministratif):\n        messages.error(request, \"Accès non autorisé.\")\n        return redirect('school_admin:connexion_compte_user')",
        "detail": "school_admin.personal_views.administrateur_etablissement_view",
        "documentation": {}
    },
    {
        "label": "dashboard_administrateur",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def dashboard_administrateur(request):\n    \"\"\"\n    Tableau de bord pour les administrateurs\n    \"\"\"\n   # Vérifier si l'utilisateur est connecté\n    if not request.user.is_authenticated:\n        return redirect('school_admin:connexion_compte_user')\n    # Rediriger vers le tableau de bord approprié selon la fonction\n    if hasattr(request.user, 'fonction'):\n        fonction = request.user.fonction",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "etablissements",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def etablissements(request):\n    \"\"\"\n    Gestion des établissements (protégé)\n    \"\"\"\n    user_administrateur = AdministrateurCompteController.get_user_compte_administrateur(request)\n    # Récupérer les paramètres de filtrage\n    search_query = request.GET.get('search', '')\n    type_filter = request.GET.get('type', '')\n    status_filter = request.GET.get('status', '')\n    page = request.GET.get('page', 1)",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "ajout_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def ajout_etablissement(request):\n    \"\"\"\n    Ajout d'un établissement (protégé)\n    \"\"\"\n    if request.method == 'POST':\n        # Utiliser le contrôleur pour traiter l'ajout d'établissement\n        context, response = EtablissementController.process_ajout_etablissement(request)\n        if response:\n            return response\n        # Si pas de redirection, afficher le template avec les erreurs",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "detaille_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def detaille_etablissement(request):\n    \"\"\"\n    Détails d'un établissement (protégé)\n    \"\"\"\n    etablissement_id = request.GET.get('id', None)\n    etablissement = EtablissementController.get_etablissement_by_id(etablissement_id)\n    if not etablissement:\n        messages.error(request, \"Établissement non trouvé.\")\n        return redirect('school_admin:etablissements')\n    # Affichage du formulaire avec les données actuelles",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "administrateur_update_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def administrateur_update_etablissement(request):\n    \"\"\"\n    Vue spéciale pour la mise à jour des paramètres d'un établissement\n    \"\"\"\n    # Récupérer l'ID de l'établissement depuis le formulaire\n    etablissement_id = request.POST.get('etablissement_id')\n    if not etablissement_id:\n        messages.error(request, \"ID de l'établissement manquant.\")\n        return redirect('school_admin:etablissements')\n    etablissement = EtablissementController.get_etablissement_by_id(etablissement_id)",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "message_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def message_etablissement(request):\n    \"\"\"\n    Messages des établissements (protégé)\n    \"\"\"\n    return render(request, 'school_admin/etablissements/message_etablissement.html')\ndef detail_message(request):\n    \"\"\"\n    Détails d'un message (protégé)\n    \"\"\"\n    return render(request, 'school_admin/etablissements/detaille_message.html')",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "detail_message",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def detail_message(request):\n    \"\"\"\n    Détails d'un message (protégé)\n    \"\"\"\n    return render(request, 'school_admin/etablissements/detaille_message.html')\ndef annonces(request):\n    \"\"\"\n    Gestion des annonces (protégé)\n    \"\"\"\n    return render(request, 'school_admin/annonces.html')",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "annonces",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def annonces(request):\n    \"\"\"\n    Gestion des annonces (protégé)\n    \"\"\"\n    return render(request, 'school_admin/annonces.html')\ndef parametres(request):\n    \"\"\"\n    Paramètres du système (protégé)\n    \"\"\"\n    return render(request, 'school_admin/profil_admin.html')",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "parametres",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def parametres(request):\n    \"\"\"\n    Paramètres du système (protégé)\n    \"\"\"\n    return render(request, 'school_admin/profil_admin.html')\ndef management_equipes(request):\n    \"\"\"\n    Gestion des équipes\n    \"\"\"\n    # Récupérer tous les utilisateurs sauf les administrateurs",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "management_equipes",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def management_equipes(request):\n    \"\"\"\n    Gestion des équipes\n    \"\"\"\n    # Récupérer tous les utilisateurs sauf les administrateurs\n    team_members = CompteUser.objects.exclude(fonction='administrateur').order_by('nom', 'prenom')\n    # Statistiques par fonction\n    team_stats = {\n        'commercial': team_members.filter(fonction='commercial').count(),\n        'developpeur': team_members.filter(fonction='developpeur').count(),",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "commercial_profile",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def commercial_profile(request, commercial_id):\n    \"\"\"\n    Profil détaillé d'un commercial avec toutes ses activités\n    \"\"\"\n    from ..model.prospection_model import Prospection\n    from ..model.rendez_vous_model import RendezVous\n    from ..model.note_commercial_model import NoteCommercial\n    from ..model.compte_rendu_model import CompteRendu\n    from django.db.models import Count, Q\n    from django.utils import timezone",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "add_team_member",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def add_team_member(request):\n    \"\"\"\n    Ajouter un membre d'équipe\n    \"\"\"\n    return render(request, 'school_admin/add_team_member.html')",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "dashboard_commercial",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def dashboard_commercial(request):\n    \"\"\"\n    Tableau de bord pour les commerciaux\n    Affiche les statistiques, les rendez-vous à venir, les établissements à prospecter, etc.\n    \"\"\"\n    # Récupérer les statistiques spécifiques aux commerciaux\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_ajouter_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_ajouter_etablissement(request):\n    \"\"\"\n    Vue pour l'ajout d'un établissement\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    if request.method == 'POST':\n        # Utiliser le contrôleur de prospection pour traiter les données",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_liste_etablissements",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_liste_etablissements(request):\n    \"\"\"\n    Vue pour lister les établissements du commercial\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer les paramètres de recherche et filtres\n    search_query = request.GET.get('search', '')",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_update_status",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_update_status(request, etablissement_id):\n    \"\"\"\n    Vue pour mettre à jour le statut d'un établissement\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_update_priority",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_update_priority(request, etablissement_id):\n    \"\"\"\n    Vue pour mettre à jour la priorité d'un établissement\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_add_notes",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_add_notes(request, etablissement_id):\n    \"\"\"\n    Vue pour ajouter une note commerciale\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_schedule_meeting",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_schedule_meeting(request, etablissement_id):\n    \"\"\"\n    Vue pour programmer un rendez-vous\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_update_general_info",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_update_general_info(request, etablissement_id):\n    \"\"\"\n    Vue pour mettre à jour les informations générales d'un établissement\n    \"\"\"\n    try:\n        etablissement = Prospection.objects.get(\n            id=etablissement_id,\n            cree_par=request.user if request.user.is_authenticated else None,\n            actif=True\n        )",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_update_location",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_update_location(request, etablissement_id):\n    \"\"\"\n    Vue pour mettre à jour la localisation d'un établissement\n    \"\"\"\n    try:\n        etablissement = Prospection.objects.get(\n            id=etablissement_id,\n            cree_par=request.user if request.user.is_authenticated else None,\n            actif=True\n        )",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_delete_meeting",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_delete_meeting(request, etablissement_id):\n    \"\"\"\n    Vue pour supprimer un rendez-vous\n    \"\"\"\n    try:\n        etablissement = Prospection.objects.get(\n            id=etablissement_id,\n            cree_par=request.user if request.user.is_authenticated else None,\n            actif=True\n        )",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_delete_note",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_delete_note(request, etablissement_id):\n    \"\"\"\n    Vue pour supprimer une note commerciale\n    \"\"\"\n    try:\n        etablissement = Prospection.objects.get(\n            id=etablissement_id,\n            cree_par=request.user if request.user.is_authenticated else None,\n            actif=True\n        )",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_detail_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_detail_etablissement(request, etablissement_id):\n    \"\"\"\n    Vue pour afficher les détails d'un établissement avec les options de prospection\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_rendez_vous",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_rendez_vous(request):\n    \"\"\"\n    Vue pour afficher tous les rendez-vous programmés\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer tous les rendez-vous du commercial connecté\n    rendez_vous_list = RendezVous.objects.filter(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_comptes_rendus",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_comptes_rendus(request):\n    \"\"\"\n    Vue pour afficher et gérer les comptes rendus de visite\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer tous les comptes rendus du commercial connecté\n    comptes_rendus_list = CompteRendu.objects.filter(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_creer_rapport",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_creer_rapport(request, rendez_vous_id):\n    \"\"\"\n    Vue pour créer un rapport de visite basé sur un rendez-vous\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        rendez_vous = RendezVous.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_messages",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_messages(request):\n    \"\"\"\n    Vue pour afficher la liste des messages commerciaux avec système de tickets\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer les paramètres de recherche et filtres\n    search_query = request.GET.get('search', '')",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_conversation_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_conversation_etablissement(request):\n    \"\"\"\n    Vue pour afficher les détails d'un message\n    \"\"\"\n    return render(request, 'school_admin/commercial/conversation_etablissement.html')\n@commercial_required\ndef commercial_profil(request):\n    \"\"\"\n    Vue pour afficher et modifier le profil du commercial\n    \"\"\"",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_profil",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_profil(request):\n    \"\"\"\n    Vue pour afficher et modifier le profil du commercial\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    commercial = request.user\n    # Traitement de la mise à jour du profil",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "dashboard_comptable",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def dashboard_comptable(request):\n    \"\"\"\n    Dashboard comptable avec données dynamiques\n    \"\"\"\n    # Statistiques générales\n    total_etablissements = Etablissement.objects.filter(actif=True).count()\n    total_eleves = Eleve.objects.filter(actif=True).count()\n    # Revenus totaux collectés (factures payées)\n    revenus_collectes = Facturation.objects.filter(statut='paye').aggregate(\n        total=Sum('montant_total')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "suivi_revenus",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def suivi_revenus(request):\n    \"\"\"\n    Vue pour le suivi des revenus avec données dynamiques\n    \"\"\"\n    # Statistiques générales\n    total_etablissements = Etablissement.objects.filter(actif=True).count()\n    total_eleves = Eleve.objects.filter(actif=True).count()\n    # Revenus attendus (toutes les factures)\n    revenus_attendus = Facturation.objects.aggregate(\n        total=Sum('montant_total')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "paiements_retard",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def paiements_retard(request):\n    \"\"\"\n    Vue pour le suivi des paiements en retard avec données dynamiques basées sur le modèle Facturation\n    \"\"\"\n    from datetime import datetime, timedelta\n    from django.utils import timezone\n    from django.db.models import Sum, Count, Q\n    # Récupérer les établissements avec des factures en retard\n    etablissements_avec_factures_retard = Facturation.objects.filter(\n        statut='en_retard'",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "calculs_automatiques",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def calculs_automatiques(request):\n    # Vue pour les calculs automatiques\n    return render(request, 'school_admin/gestion_comptable/calculs_automatiques.html')\ndef rapports_mensuels(request):\n    # Vue pour les rapports mensuels (bilan mensuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_mensuels.html')\ndef rapports_annuels(request):\n    # Vue pour les rapports annuels (bilan annuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_annuels.html')\ndef gestion_etablissements(request):",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "rapports_mensuels",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def rapports_mensuels(request):\n    # Vue pour les rapports mensuels (bilan mensuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_mensuels.html')\ndef rapports_annuels(request):\n    # Vue pour les rapports annuels (bilan annuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_annuels.html')\ndef gestion_etablissements(request):\n    \"\"\"\n    Vue pour la gestion des établissements avec données dynamiques\n    \"\"\"",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "rapports_annuels",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def rapports_annuels(request):\n    # Vue pour les rapports annuels (bilan annuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_annuels.html')\ndef gestion_etablissements(request):\n    \"\"\"\n    Vue pour la gestion des établissements avec données dynamiques\n    \"\"\"\n    from django.db.models import Sum, Count, Q\n    from datetime import datetime, timedelta\n    from django.utils import timezone",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "gestion_etablissements",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def gestion_etablissements(request):\n    \"\"\"\n    Vue pour la gestion des établissements avec données dynamiques\n    \"\"\"\n    from django.db.models import Sum, Count, Q\n    from datetime import datetime, timedelta\n    from django.utils import timezone\n    # Statistiques générales\n    total_etablissements = Etablissement.objects.filter(actif=True).count()\n    # Établissements en règle (pas de factures impayées ou en retard)",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "details_financiers_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def details_financiers_etablissement(request, etablissement_id):\n    \"\"\"\n    Vue pour les détails financiers d'un établissement avec données dynamiques\n    \"\"\"\n    from django.db.models import Sum, Count, Q\n    from datetime import datetime, timedelta\n    from django.utils import timezone\n    from django.shortcuts import redirect\n    from django.contrib import messages\n    from ..model.facturation_model import Facturation",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "traiter_paiement_facture",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def traiter_paiement_facture(request, etablissement_id):\n    \"\"\"\n    Vue séparée pour traiter le paiement d'une facture\n    \"\"\"\n    from django.db.models import Sum, Count, Q\n    from datetime import datetime, timedelta\n    from django.utils import timezone\n    from django.shortcuts import redirect\n    from ..model.facturation_model import Facturation\n    # Récupérer l'établissement par son ID",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "facture_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def facture_etablissement(request):\n    \"\"\"\n    Vue pour afficher la facture d'un établissement avec données réelles\n    \"\"\"\n    from django.shortcuts import get_object_or_404\n    from django.contrib import messages\n    from ..model.facturation_model import Facturation\n    # Récupérer les paramètres\n    facture_id = request.GET.get('facture_id')\n    etablissement_id = request.GET.get('etablissement_id')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "envoyer_facture",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def envoyer_facture(request, facture_numero, etablissement_id):\n    \"\"\"\n    Vue dédiée pour marquer une facture comme envoyée\n    \"\"\"\n    try:\n        # Récupérer l'établissement\n        etablissement = Etablissement.objects.get(id=etablissement_id, actif=True)\n        # Récupérer la facture\n        facture = Facturation.objects.get(\n            numero_facture=facture_numero,",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "mettre_a_jour_statuts_factures",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def mettre_a_jour_statuts_factures(request):\n    \"\"\"\n    Vue pour mettre à jour manuellement les statuts des factures\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            # Exécuter la mise à jour\n            nombre_mises_a_jour = Facturation.mettre_a_jour_tous_les_statuts()\n            if nombre_mises_a_jour > 0:\n                messages.success(request, f\"✅ Mise à jour terminée: {nombre_mises_a_jour} factures mises à jour\")",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "gestion_personnel_financier",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def gestion_personnel_financier(request):\n    # Vue pour la gestion financière du personnel\n    return render(request, 'school_admin/gestion_comptable/gestion_personnel_financier.html')\ndef gestion_depenses(request):\n    \"\"\"\n    Vue pour la gestion des dépenses avec données dynamiques\n    \"\"\"\n    from django.db.models import Sum, Count, Q\n    from datetime import datetime, timedelta\n    from django.utils import timezone",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "gestion_depenses",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def gestion_depenses(request):\n    \"\"\"\n    Vue pour la gestion des dépenses avec données dynamiques\n    \"\"\"\n    from django.db.models import Sum, Count, Q\n    from datetime import datetime, timedelta\n    from django.utils import timezone\n    # Traitement du formulaire d'ajout de dépense\n    if request.method == 'POST' and 'add_expense' in request.POST:\n        try:",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "modifier_depense",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def modifier_depense(request, depense_id):\n    \"\"\"\n    Vue pour modifier une dépense existante\n    \"\"\"\n    from datetime import datetime\n    try:\n        depense = Depense.objects.get(id=depense_id)\n    except Depense.DoesNotExist:\n        messages.error(request, \"Dépense non trouvée.\")\n        return redirect('school_admin:gestion_depenses')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "confirmer_depense",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def confirmer_depense(request, depense_id):\n    \"\"\"\n    Vue pour confirmer qu'une dépense a été effectuée\n    \"\"\"\n    try:\n        depense = Depense.objects.get(id=depense_id)\n        if depense.statut != 'en_attente':\n            messages.warning(request, \"Cette dépense ne peut pas être confirmée.\")\n            return redirect('school_admin:gestion_depenses')\n        # Mettre à jour le statut",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "ajouter_budget",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def ajouter_budget(request):\n    \"\"\"\n    Vue pour ajouter un nouveau budget\n    \"\"\"\n    if request.method == 'POST':\n        try:\n            with transaction.atomic():\n                # Récupérer les données du formulaire\n                nom = request.POST.get('nom', '').strip()\n                categorie = request.POST.get('categorie', '')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "modifier_budget",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def modifier_budget(request, budget_id):\n    \"\"\"\n    Vue pour modifier un budget existant\n    \"\"\"\n    try:\n        budget = Budget.objects.get(id=budget_id)\n    except Budget.DoesNotExist:\n        messages.error(request, \"Budget non trouvé.\")\n        return redirect('school_admin:gestion_depenses')\n    if request.method == 'POST':",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "supprimer_budget",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def supprimer_budget(request, budget_id):\n    \"\"\"\n    Vue pour supprimer un budget\n    \"\"\"\n    try:\n        budget = Budget.objects.get(id=budget_id)\n        budget_nom = budget.nom\n        budget.delete()\n        messages.success(request, f\"Budget '{budget_nom}' supprimé avec succès.\")\n    except Budget.DoesNotExist:",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "dashboard_directeur",
        "kind": 2,
        "importPath": "school_admin.personal_views.directeur_view",
        "description": "school_admin.personal_views.directeur_view",
        "peekOfCode": "def dashboard_directeur(request):\n    \"\"\"\n    Vue du tableau de bord pour les directeurs d'établissement\n    \"\"\"\n    # Vérifier que l'utilisateur connecté est bien un établissement\n    if not isinstance(request.user, Etablissement):\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer les informations de l'établissement\n    etablissement = request.user\n    # Statistiques des élèves",
        "detail": "school_admin.personal_views.directeur_view",
        "documentation": {}
    },
    {
        "label": "facturation_directeur",
        "kind": 2,
        "importPath": "school_admin.personal_views.directeur_view",
        "description": "school_admin.personal_views.directeur_view",
        "peekOfCode": "def facturation_directeur(request):\n    \"\"\"\n    Vue de la page de facturation pour les directeurs d'établissement\n    \"\"\"\n    # Vérifier que l'utilisateur connecté est bien un établissement\n    if not isinstance(request.user, Etablissement):\n        return redirect('school_admin:connexion_compte_user')\n    etablissement = request.user\n    # Récupérer toutes les factures de l'établissement\n    facturations = Facturation.objects.filter(etablissement=etablissement).order_by('-date_creation')",
        "detail": "school_admin.personal_views.directeur_view",
        "documentation": {}
    },
    {
        "label": "gestion_pedagogique",
        "kind": 2,
        "importPath": "school_admin.personal_views.directeur_view",
        "description": "school_admin.personal_views.directeur_view",
        "peekOfCode": "def gestion_pedagogique(request):\n    \"\"\"\n    Vue de la page de gestion pédagogique pour les directeurs d'établissement\n    \"\"\"\n    # Vérifier que l'utilisateur connecté est bien un établissement\n    if not isinstance(request.user, Etablissement):\n        return redirect('school_admin:connexion_compte_user')\n    return render(request, 'school_admin/directeur/gestion_pedagogique.html')\n@login_required\ndef gestion_eleves(request):",
        "detail": "school_admin.personal_views.directeur_view",
        "documentation": {}
    },
    {
        "label": "gestion_eleves",
        "kind": 2,
        "importPath": "school_admin.personal_views.directeur_view",
        "description": "school_admin.personal_views.directeur_view",
        "peekOfCode": "def gestion_eleves(request):\n    \"\"\"\n    Vue de la page de gestion des élèves pour les directeurs d'établissement\n    \"\"\"\n      # Vérifier que l'utilisateur connecté est bien un établissement\n    if not isinstance(request.user, Etablissement):\n        return redirect('school_admin:connexion_compte_user')\n    return render(request, 'school_admin/directeur/gestion_eleves.html')\n@login_required\ndef gestion_etablissement(request):",
        "detail": "school_admin.personal_views.directeur_view",
        "documentation": {}
    },
    {
        "label": "gestion_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.directeur_view",
        "description": "school_admin.personal_views.directeur_view",
        "peekOfCode": "def gestion_etablissement(request):\n    \"\"\"\n    Vue de la page de gestion de l'établissement pour les directeurs d'établissement\n    \"\"\"\n    # Vérifier que l'utilisateur connecté est bien un établissement\n    if not isinstance(request.user, Etablissement):\n        return redirect('school_admin:connexion_compte_user')\n    return render(request, 'school_admin/directeur/gestion_etablissement.html')",
        "detail": "school_admin.personal_views.directeur_view",
        "documentation": {}
    },
    {
        "label": "dashboard_personnel_administratif",
        "kind": 2,
        "importPath": "school_admin.personal_views.personnel_administratif_view",
        "description": "school_admin.personal_views.personnel_administratif_view",
        "peekOfCode": "def dashboard_personnel_administratif(request):\n    \"\"\"\n    Dashboard pour le personnel administratif\n    \"\"\"\n    # Vérifier que l'utilisateur est du personnel administratif\n    if not isinstance(request.user, PersonnelAdministratif):\n        messages.error(request, \"Accès non autorisé.\")\n        return redirect('school_admin:connexion_compte_user')\n    personnel = request.user\n    etablissement = personnel.etablissement",
        "detail": "school_admin.personal_views.personnel_administratif_view",
        "documentation": {}
    },
    {
        "label": "profil_personnel_administratif",
        "kind": 2,
        "importPath": "school_admin.personal_views.personnel_administratif_view",
        "description": "school_admin.personal_views.personnel_administratif_view",
        "peekOfCode": "def profil_personnel_administratif(request):\n    \"\"\"\n    Profil du personnel administratif\n    \"\"\"\n    # Vérifier que l'utilisateur est du personnel administratif\n    if not isinstance(request.user, PersonnelAdministratif):\n        messages.error(request, \"Accès non autorisé.\")\n        return redirect('school_admin:connexion_compte_user')\n    personnel = request.user\n    if request.method == 'POST':",
        "detail": "school_admin.personal_views.personnel_administratif_view",
        "documentation": {}
    },
    {
        "label": "liste_eleves_personnel",
        "kind": 2,
        "importPath": "school_admin.personal_views.personnel_administratif_view",
        "description": "school_admin.personal_views.personnel_administratif_view",
        "peekOfCode": "def liste_eleves_personnel(request):\n    \"\"\"\n    Liste des élèves pour le personnel administratif\n    \"\"\"\n    # Vérifier que l'utilisateur est du personnel administratif\n    if not isinstance(request.user, PersonnelAdministratif):\n        messages.error(request, \"Accès non autorisé.\")\n        return redirect('school_admin:connexion_compte_user')\n    personnel = request.user\n    etablissement = personnel.etablissement",
        "detail": "school_admin.personal_views.personnel_administratif_view",
        "documentation": {}
    },
    {
        "label": "liste_enseignants_personnel",
        "kind": 2,
        "importPath": "school_admin.personal_views.personnel_administratif_view",
        "description": "school_admin.personal_views.personnel_administratif_view",
        "peekOfCode": "def liste_enseignants_personnel(request):\n    \"\"\"\n    Liste des enseignants pour le personnel administratif\n    \"\"\"\n    # Vérifier que l'utilisateur est du personnel administratif\n    if not isinstance(request.user, PersonnelAdministratif):\n        messages.error(request, \"Accès non autorisé.\")\n        return redirect('school_admin:connexion_compte_user')\n    personnel = request.user\n    etablissement = personnel.etablissement",
        "detail": "school_admin.personal_views.personnel_administratif_view",
        "documentation": {}
    },
    {
        "label": "dashboard_secretaire",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def dashboard_secretaire(request):\n    \"\"\"\n    Dashboard pour le secrétaire d'établissement ou le directeur\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "inscription_eleves",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def inscription_eleves(request):\n    \"\"\"\n    Page d'inscription des élèves pour le secrétaire ou le directeur\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "liste_eleves",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def liste_eleves(request):\n    \"\"\"\n    Page de liste des élèves inscrits par classe\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "reçu_inscription_eleve",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def reçu_inscription_eleve(request, eleve_id):\n    \"\"\"\n    Page de reçu d'inscription pour un élève (secrétaire ou directeur)\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "detail_eleve",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def detail_eleve(request, eleve_id):\n    \"\"\"\n    Page de détails d'un élève avec formulaire de modification (secrétaire ou directeur)\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "transfer_eleve",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def transfer_eleve(request, eleve_id):\n    \"\"\"\n    Transfert d'un élève vers une autre classe (secrétaire ou directeur)\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "gestion_classes",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def gestion_classes(request):\n    \"\"\"\n    Page de gestion des classes pour le secrétaire ou le directeur\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "detail_classe",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def detail_classe(request, classe_id):\n    \"\"\"\n    Page de détails d'une classe avec liste des élèves (secrétaire ou directeur)\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "imprimer_liste_eleves",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def imprimer_liste_eleves(request, classe_id):\n    \"\"\"\n    Page d'impression de la liste des élèves d'une classe (secrétaire ou directeur)\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "desactiver_eleve",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def desactiver_eleve(request, eleve_id):\n    \"\"\"\n    Désactiver un élève et mettre à jour la facturation (secrétaire ou directeur)\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "supprimer_eleve",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def supprimer_eleve(request, eleve_id):\n    \"\"\"\n    Supprimer définitivement un élève (secrétaire ou directeur)\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "synchroniser_facturation",
        "kind": 2,
        "importPath": "school_admin.personal_views.secretaire_view",
        "description": "school_admin.personal_views.secretaire_view",
        "peekOfCode": "def synchroniser_facturation(request):\n    \"\"\"\n    Synchroniser les données de facturation avec les élèves actifs (secrétaire ou directeur)\n    \"\"\"\n    # Récupérer l'utilisateur connecté\n    user = request.user\n    # Vérifier que l'utilisateur est soit un secrétaire soit un directeur\n    if isinstance(user, PersonnelAdministratif) and user.fonction == 'secretaire':\n        etablissement = user.etablissement\n    elif isinstance(user, Etablissement):",
        "detail": "school_admin.personal_views.secretaire_view",
        "documentation": {}
    },
    {
        "label": "get_range",
        "kind": 2,
        "importPath": "school_admin.templatetags.pagination_tags",
        "description": "school_admin.templatetags.pagination_tags",
        "peekOfCode": "def get_range(value):\n    \"\"\"\n    Filtre pour générer une liste de nombres de 1 à value\n    Usage:\n    {% for i in total_pages|get_range %}\n        {{ i }}\n    {% endfor %}\n    \"\"\"\n    try:\n        value = int(value)",
        "detail": "school_admin.templatetags.pagination_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "school_admin.templatetags.pagination_tags",
        "description": "school_admin.templatetags.pagination_tags",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef get_range(value):\n    \"\"\"\n    Filtre pour générer une liste de nombres de 1 à value\n    Usage:\n    {% for i in total_pages|get_range %}\n        {{ i }}\n    {% endfor %}\n    \"\"\"",
        "detail": "school_admin.templatetags.pagination_tags",
        "documentation": {}
    },
    {
        "label": "CompteUserAdmin",
        "kind": 6,
        "importPath": "school_admin.admin",
        "description": "school_admin.admin",
        "peekOfCode": "class CompteUserAdmin(UserAdmin):\n    list_display = ('email', 'nom', 'prenom', 'type_compte', 'departement', 'is_active')\n    list_filter = ('type_compte', 'departement', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    ordering = ('email',)  # Utiliser email au lieu de username\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Informations personnelles', {'fields': ('nom', 'prenom', 'telephone', 'date_naissance', 'photo')}),\n        ('Informations professionnelles', {'fields': ('type_compte', 'fonction', 'departement')}),\n        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),",
        "detail": "school_admin.admin",
        "documentation": {}
    },
    {
        "label": "SchoolAdminConfig",
        "kind": 6,
        "importPath": "school_admin.apps",
        "description": "school_admin.apps",
        "peekOfCode": "class SchoolAdminConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'school_admin'",
        "detail": "school_admin.apps",
        "documentation": {}
    },
    {
        "label": "MultiUserBackend",
        "kind": 6,
        "importPath": "school_admin.authentication_backends",
        "description": "school_admin.authentication_backends",
        "peekOfCode": "class MultiUserBackend(BaseBackend):\n    \"\"\"\n    Backend d'authentification personnalisé qui gère à la fois\n    les CompteUser et les Etablissement\n    \"\"\"\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        \"\"\"\n        Authentifie un utilisateur en vérifiant dans tous les modèles d'utilisateurs\n        \"\"\"\n        if username is None or password is None:",
        "detail": "school_admin.authentication_backends",
        "documentation": {}
    },
    {
        "label": "commercial_required",
        "kind": 2,
        "importPath": "school_admin.decorators",
        "description": "school_admin.decorators",
        "peekOfCode": "def commercial_required(view_func):\n    \"\"\"\n    Décorateur pour vérifier si l'utilisateur est connecté et est un commercial.\n    Redirige vers la page de connexion si l'utilisateur n'est pas connecté.\n    Redirige vers le tableau de bord approprié si l'utilisateur n'est pas un commercial.\n    \"\"\"\n    @wraps(view_func)\n    def _wrapped_view(request, *args, **kwargs):\n        # Vérifier si l'utilisateur est connecté\n        if not request.user.is_authenticated:",
        "detail": "school_admin.decorators",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "school_admin.decorators",
        "description": "school_admin.decorators",
        "peekOfCode": "def admin_required(view_func):\n    \"\"\"\n    Décorateur pour vérifier si l'utilisateur est connecté et est un administrateur.\n    Redirige vers la page de connexion si l'utilisateur n'est pas connecté.\n    Redirige vers le tableau de bord approprié si l'utilisateur n'est pas un administrateur.\n    \"\"\"\n    @wraps(view_func)\n    def _wrapped_view(request, *args, **kwargs):\n        # Vérifier si l'utilisateur est connecté\n        if not request.user.is_authenticated:",
        "detail": "school_admin.decorators",
        "documentation": {}
    },
    {
        "label": "login_required_with_redirect",
        "kind": 2,
        "importPath": "school_admin.decorators",
        "description": "school_admin.decorators",
        "peekOfCode": "def login_required_with_redirect(view_func):\n    \"\"\"\n    Décorateur pour vérifier si l'utilisateur est connecté.\n    Redirige vers la page de connexion si l'utilisateur n'est pas connecté.\n    \"\"\"\n    @wraps(view_func)\n    def _wrapped_view(request, *args, **kwargs):\n        # Vérifier si l'utilisateur est connecté\n        if not request.user.is_authenticated:\n            next_url = request.path",
        "detail": "school_admin.decorators",
        "documentation": {}
    },
    {
        "label": "AuthenticationMiddleware",
        "kind": 6,
        "importPath": "school_admin.middleware",
        "description": "school_admin.middleware",
        "peekOfCode": "class AuthenticationMiddleware:\n    \"\"\"\n    Middleware pour vérifier l'authentification des utilisateurs et les rediriger\n    vers la page de connexion si nécessaire, ou vers leur tableau de bord approprié.\n    \"\"\"\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        # Liste des URLs qui ne nécessitent pas d'authentification\n        public_urls = [",
        "detail": "school_admin.middleware",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "school_admin.models",
        "description": "school_admin.models",
        "peekOfCode": "__all__ = ['CompteUser', 'Etablissement', 'PersonnelAdministratif', 'Classe', 'Eleve', 'Prospection', 'NoteCommercial', 'RendezVous', 'Facturation', 'Professeur', 'Matiere']",
        "detail": "school_admin.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.urls",
        "description": "school_admin.urls",
        "peekOfCode": "app_name = 'school_admin'\nurlpatterns =[\n    # Autres routes existantes\n    path('', dashboard_administrateur, name='dashboard'),\n    path('etablissements/',etablissements, name='etablissements'),\n    path('etablissements/ajouter', ajout_etablissement, name='ajout_etablissement'),\n    path('etablissements/detaille/', detaille_etablissement, name='detaille_etablissement'),\n    path('etablissements/update/', administrateur_update_etablissement, name='administrateur_update_etablissement'),\n    path('etablissements/messages/', message_etablissement, name='message_etablissement'),\n    path('etablissements/messages/detail/', detail_message, name='detail_message'),",
        "detail": "school_admin.urls",
        "documentation": {}
    },
    {
        "label": "inscription_compte_user",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def inscription_compte_user(request):\n    \"\"\"\n    Gère l'inscription d'un nouvel utilisateur (public)\n    \"\"\"\n    if request.method == 'POST':\n        # Utiliser le contrôleur pour traiter l'inscription\n        result = CompteUserController.compte_user_register_view(request)\n        if isinstance(result, tuple) and len(result) == 2:\n            context, response = result\n            if response:",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "connexion_compte_user",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def connexion_compte_user(request):\n    \"\"\"\n    Gère la connexion d'un utilisateur (public)\n    \"\"\"\n    if request.method == 'POST':\n        # Utiliser le contrôleur pour traiter la connexion\n        result = CompteUserController.compte_user_login_view(request)\n        if isinstance(result, tuple) and len(result) == 2:\n            context, response = result\n            if response:",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_support",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_support(request):\n    \"\"\"\n    Tableau de bord pour le support client\n    \"\"\"\n    context = {\n        'user_function': 'support',\n        'page_title': 'Tableau de bord Support'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_support.html', context)\n# ===== DEVELOPPEUR =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_developpeur",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_developpeur(request):\n    \"\"\"\n    Tableau de bord pour les développeurs\n    \"\"\"\n    context = {\n        'user_function': 'developpeur',\n        'page_title': 'Tableau de bord Développeur'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_developpeur.html', context)\n# ===== MARKETING =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_marketing",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_marketing(request):\n    \"\"\"\n    Tableau de bord pour le marketing\n    \"\"\"\n    context = {\n        'user_function': 'marketing',\n        'page_title': 'Tableau de bord Marketing'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_marketing.html', context)\n# ===== COMPTABLE =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_comptable",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_comptable(request):\n    \"\"\"\n    Tableau de bord pour les comptables\n    \"\"\"\n    context = {\n        'user_function': 'comptable',\n        'page_title': 'Tableau de bord Comptable'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_comptable.html', context)\n# ===== RH =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_rh",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_rh(request):\n    \"\"\"\n    Tableau de bord pour les ressources humaines\n    \"\"\"\n    context = {\n        'user_function': 'ressources humaines',\n        'page_title': 'Tableau de bord Ressources Humaines'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_rh.html', context)\n# ===== DECONNEXION PAR FONCTION =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "deconnexion_compte_commercial",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def deconnexion_compte_commercial(request):\n    \"\"\"\n    Déconnexion d'un compte commercial\n    \"\"\"\n    return CommercialCompteController.logout_user_commercial(request)\n# ===== ADMINISTRATEUR =====\ndef deconnexion_compte_administrateur(request):\n    \"\"\"\n    Déconnexion d'un compte administrateur\n    \"\"\"",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "deconnexion_compte_administrateur",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def deconnexion_compte_administrateur(request):\n    \"\"\"\n    Déconnexion d'un compte administrateur\n    \"\"\"\n    return AdministrateurCompteController.logout_user_administrateur(request)\n# ===== SUPPORT =====\n# ===== DEVELOPPEUR =====\n# ===== MARKETING =====\n# ===== COMPTABLE =====\n# ===== RH =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Create your views here.\ndef inscription_compte_user(request):\n    \"\"\"\n    Gère l'inscription d'un nouvel utilisateur (public)\n    \"\"\"\n    if request.method == 'POST':\n        # Utiliser le contrôleur pour traiter l'inscription\n        result = CompteUserController.compte_user_register_view(request)\n        if isinstance(result, tuple) and len(result) == 2:",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "mettre_a_jour_statuts",
        "kind": 2,
        "importPath": "scripts.mettre_a_jour_statuts_automatique",
        "description": "scripts.mettre_a_jour_statuts_automatique",
        "peekOfCode": "def mettre_a_jour_statuts():\n    \"\"\"Met à jour les statuts des factures automatiquement\"\"\"\n    try:\n        logger.info(\"Début de la mise à jour automatique des statuts de factures\")\n        # Compter les factures avant mise à jour\n        factures_avant = Facturation.objects.filter(\n            statut__in=['en_attente', 'en_retard', 'impaye', 'contentieux']\n        ).count()\n        # Exécuter la mise à jour\n        nombre_mises_a_jour = Facturation.mettre_a_jour_tous_les_statuts()",
        "detail": "scripts.mettre_a_jour_statuts_automatique",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "scripts.mettre_a_jour_statuts_automatique",
        "description": "scripts.mettre_a_jour_statuts_automatique",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef mettre_a_jour_statuts():\n    \"\"\"Met à jour les statuts des factures automatiquement\"\"\"\n    try:\n        logger.info(\"Début de la mise à jour automatique des statuts de factures\")\n        # Compter les factures avant mise à jour\n        factures_avant = Facturation.objects.filter(\n            statut__in=['en_attente', 'en_retard', 'impaye', 'contentieux']\n        ).count()\n        # Exécuter la mise à jour",
        "detail": "scripts.mettre_a_jour_statuts_automatique",
        "documentation": {}
    },
    {
        "label": "delete_etablissements_cascade",
        "kind": 2,
        "importPath": "delete_etablissement_cascade",
        "description": "delete_etablissement_cascade",
        "peekOfCode": "def delete_etablissements_cascade():\n    \"\"\"Supprime tous les établissements en gérant les contraintes de clé étrangère\"\"\"\n    with connection.cursor() as cursor:\n        # Compter les établissements\n        cursor.execute(\"SELECT COUNT(*) FROM school_admin_etablissement\")\n        count = cursor.fetchone()[0]\n        print(f\"Nombre d'établissements trouvés : {count}\")\n        if count == 0:\n            print(\"Aucun établissement à supprimer.\")\n            return",
        "detail": "delete_etablissement_cascade",
        "documentation": {}
    },
    {
        "label": "backup_and_delete_etablissements",
        "kind": 2,
        "importPath": "delete_etablissement_data",
        "description": "delete_etablissement_data",
        "peekOfCode": "def backup_and_delete_etablissements():\n    \"\"\"Sauvegarde et supprime tous les établissements\"\"\"\n    # Compter les établissements existants\n    count = Etablissement.objects.count()\n    print(f\"Nombre d'établissements trouvés : {count}\")\n    if count == 0:\n        print(\"Aucun établissement à supprimer.\")\n        return\n    # Sauvegarde des données (optionnel)\n    print(\"Création de la sauvegarde...\")",
        "detail": "delete_etablissement_data",
        "documentation": {}
    },
    {
        "label": "delete_etablissements_with_sql",
        "kind": 2,
        "importPath": "delete_etablissement_sql",
        "description": "delete_etablissement_sql",
        "peekOfCode": "def delete_etablissements_with_sql():\n    \"\"\"Supprime tous les établissements en utilisant SQL brut\"\"\"\n    with connection.cursor() as cursor:\n        # Compter les établissements\n        cursor.execute(\"SELECT COUNT(*) FROM school_admin_etablissement\")\n        count = cursor.fetchone()[0]\n        print(f\"Nombre d'établissements trouvés : {count}\")\n        if count == 0:\n            print(\"Aucun établissement à supprimer.\")\n            return",
        "detail": "delete_etablissement_sql",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "supprimer_toutes_factures",
        "kind": 2,
        "importPath": "supprimer_toutes_factures",
        "description": "supprimer_toutes_factures",
        "peekOfCode": "def supprimer_toutes_factures():\n    \"\"\"Supprimer toutes les factures de la base de données\"\"\"\n    try:\n        print(\"=== Suppression de toutes les factures ===\")\n        # Compter les factures existantes\n        nombre_factures = Facturation.objects.count()\n        print(f\"📊 Nombre de factures trouvées: {nombre_factures}\")\n        if nombre_factures == 0:\n            print(\"✅ Aucune facture à supprimer\")\n            return True",
        "detail": "supprimer_toutes_factures",
        "documentation": {}
    },
    {
        "label": "test_authenticated_classes",
        "kind": 2,
        "importPath": "test_authenticated_classes",
        "description": "test_authenticated_classes",
        "peekOfCode": "def test_authenticated_classes():\n    \"\"\"Test de la page des classes avec authentification\"\"\"\n    try:\n        # Créer une session pour maintenir les cookies\n        session = requests.Session()\n        # URL de connexion\n        login_url = \"http://localhost:8000/connexion/administrateur/\"\n        classes_url = \"http://localhost:8000/classes/\"\n        # Récupérer la page de connexion pour obtenir le CSRF token\n        login_page = session.get(login_url)",
        "detail": "test_authenticated_classes",
        "documentation": {}
    },
    {
        "label": "test_classes_page",
        "kind": 2,
        "importPath": "test_classes_page",
        "description": "test_classes_page",
        "peekOfCode": "def test_classes_page():\n    \"\"\"Test de la page des classes\"\"\"\n    try:\n        # URL de la page des classes\n        url = \"http://localhost:8000/classes/\"\n        # Faire une requête GET\n        response = requests.get(url)\n        if response.status_code == 200:\n            print(\"[OK] Page des classes accessible\")\n            # Parser le HTML",
        "detail": "test_classes_page",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 5,
        "importPath": "test_code_generation",
        "description": "test_code_generation",
        "peekOfCode": "types = ['primary', 'secondary', 'highschool', 'unknown']\nprint(\"Test de génération de codes d'établissement :\")\nprint(\"-\" * 40)\nfor type_etab in types:\n    code = EtablissementController.generate_etablissement_code(type_etab)\n    print(f\"Type: {type_etab:<10} -> Code généré: {code}\")\nprint(\"-\" * 40)\nprint(\"Test terminé avec succès.\")",
        "detail": "test_code_generation",
        "documentation": {}
    },
    {
        "label": "test_simple",
        "kind": 2,
        "importPath": "test_simple",
        "description": "test_simple",
        "peekOfCode": "def test_simple():\n    \"\"\"Test simple de la page des classes\"\"\"\n    try:\n        # Créer une session pour maintenir les cookies\n        session = requests.Session()\n        # URL de la page des classes\n        url = \"http://localhost:8000/classes/\"\n        # Faire une requête GET\n        response = session.get(url)\n        print(f\"Status Code: {response.status_code}\")",
        "detail": "test_simple",
        "documentation": {}
    },
    {
        "label": "test_creation_factures_test",
        "kind": 2,
        "importPath": "test_statuts_factures",
        "description": "test_statuts_factures",
        "peekOfCode": "def test_creation_factures_test():\n    \"\"\"Crée des factures de test avec différentes dates d'échéance\"\"\"\n    print(\"🧪 Test 1: Création de factures de test\")\n    print(\"=\" * 50)\n    # Récupérer un établissement existant ou en créer un\n    try:\n        etablissement = Etablissement.objects.filter(actif=True).first()\n        if not etablissement:\n            print(\"❌ Aucun établissement trouvé. Création d'un établissement de test...\")\n            etablissement = Etablissement.objects.create(",
        "detail": "test_statuts_factures",
        "documentation": {}
    },
    {
        "label": "test_mise_a_jour_automatique",
        "kind": 2,
        "importPath": "test_statuts_factures",
        "description": "test_statuts_factures",
        "peekOfCode": "def test_mise_a_jour_automatique():\n    \"\"\"Teste la mise à jour automatique des statuts\"\"\"\n    print(\"\\n🧪 Test 2: Mise à jour automatique des statuts\")\n    print(\"=\" * 50)\n    # Afficher les statuts avant mise à jour\n    print(\"📊 Statuts avant mise à jour:\")\n    factures = Facturation.objects.all()\n    for facture in factures:\n        print(f\"   - {facture.numero_facture}: {facture.get_statut_display()} (échéance: {facture.date_echeance.strftime('%d/%m/%Y') if facture.date_echeance else 'N/A'})\")\n    # Exécuter la mise à jour automatique",
        "detail": "test_statuts_factures",
        "documentation": {}
    },
    {
        "label": "test_verification_statuts",
        "kind": 2,
        "importPath": "test_statuts_factures",
        "description": "test_statuts_factures",
        "peekOfCode": "def test_verification_statuts():\n    \"\"\"Vérifie que les statuts sont corrects après mise à jour\"\"\"\n    print(\"\\n🧪 Test 3: Vérification des statuts\")\n    print(\"=\" * 50)\n    factures = Facturation.objects.all()\n    erreurs = []\n    for facture in factures:\n        statut_attendu = None\n        jours_retard = 0\n        # Calculer le retard",
        "detail": "test_statuts_factures",
        "documentation": {}
    },
    {
        "label": "test_statistiques",
        "kind": 2,
        "importPath": "test_statuts_factures",
        "description": "test_statuts_factures",
        "peekOfCode": "def test_statistiques():\n    \"\"\"Affiche les statistiques des statuts\"\"\"\n    print(\"\\n🧪 Test 4: Statistiques des statuts\")\n    print(\"=\" * 50)\n    stats = {\n        'en_attente': Facturation.objects.filter(statut='en_attente').count(),\n        'en_retard': Facturation.objects.filter(statut='en_retard').count(),\n        'impaye': Facturation.objects.filter(statut='impaye').count(),\n        'contentieux': Facturation.objects.filter(statut='contentieux').count(),\n        'paye': Facturation.objects.filter(statut='paye').count(),",
        "detail": "test_statuts_factures",
        "documentation": {}
    },
    {
        "label": "nettoyer_factures_test",
        "kind": 2,
        "importPath": "test_statuts_factures",
        "description": "test_statuts_factures",
        "peekOfCode": "def nettoyer_factures_test():\n    \"\"\"Nettoie les factures de test créées\"\"\"\n    print(\"\\n🧹 Nettoyage des factures de test\")\n    print(\"=\" * 50)\n    try:\n        # Supprimer les factures de test (celles avec \"Test\" dans la description)\n        factures_test = Facturation.objects.filter(description__icontains=\"Test\")\n        nombre_supprimees = factures_test.count()\n        factures_test.delete()\n        print(f\"✅ {nombre_supprimees} factures de test supprimées\")",
        "detail": "test_statuts_factures",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_statuts_factures",
        "description": "test_statuts_factures",
        "peekOfCode": "def main():\n    \"\"\"Fonction principale de test\"\"\"\n    print(\"🚀 DÉBUT DES TESTS - Mise à jour automatique des statuts de factures\")\n    print(\"=\" * 80)\n    try:\n        # Test 1: Création de factures de test\n        factures_test = test_creation_factures_test()\n        if not factures_test:\n            print(\"❌ Échec de la création des factures de test\")\n            return False",
        "detail": "test_statuts_factures",
        "documentation": {}
    },
    {
        "label": "project_root",
        "kind": 5,
        "importPath": "test_statuts_factures",
        "description": "test_statuts_factures",
        "peekOfCode": "project_root = os.path.dirname(os.path.abspath(__file__))\nif project_root not in sys.path:\n    sys.path.insert(0, project_root)\ndjango.setup()\nfrom school_admin.model.facturation_model import Facturation\nfrom school_admin.model.etablissement_model import Etablissement\nfrom django.utils import timezone\ndef test_creation_factures_test():\n    \"\"\"Crée des factures de test avec différentes dates d'échéance\"\"\"\n    print(\"🧪 Test 1: Création de factures de test\")",
        "detail": "test_statuts_factures",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "test_statuts_manage",
        "description": "test_statuts_manage",
        "peekOfCode": "def run_test():\n    \"\"\"Exécute le test via manage.py shell\"\"\"\n    print(\"🚀 DÉBUT DES TESTS - Mise à jour automatique des statuts de factures\")\n    print(\"=\" * 80)\n    # Commande pour exécuter le test\n    test_script = \"\"\"\nimport os\nimport sys\nfrom datetime import datetime, timedelta\nfrom decimal import Decimal",
        "detail": "test_statuts_manage",
        "documentation": {}
    },
    {
        "label": "test_creation_factures_test",
        "kind": 2,
        "importPath": "test_statuts_manage",
        "description": "test_statuts_manage",
        "peekOfCode": "def test_creation_factures_test():\n    print(\"🧪 Test 1: Création de factures de test\")\n    print(\"=\" * 50)\n    # Récupérer un établissement existant ou en créer un\n    try:\n        etablissement = Etablissement.objects.filter(actif=True).first()\n        if not etablissement:\n            print(\"❌ Aucun établissement trouvé. Création d'un établissement de test...\")\n            etablissement = Etablissement.objects.create(\n                nom=\"École Test\",",
        "detail": "test_statuts_manage",
        "documentation": {}
    },
    {
        "label": "test_mise_a_jour_automatique",
        "kind": 2,
        "importPath": "test_statuts_manage",
        "description": "test_statuts_manage",
        "peekOfCode": "def test_mise_a_jour_automatique():\n    print(\"\\\\n🧪 Test 2: Mise à jour automatique des statuts\")\n    print(\"=\" * 50)\n    # Afficher les statuts avant mise à jour\n    print(\"📊 Statuts avant mise à jour:\")\n    factures = Facturation.objects.filter(description__icontains=\"Test\")\n    for facture in factures:\n        print(f\"   - {facture.numero_facture}: {facture.get_statut_display()} (échéance: {facture.date_echeance.strftime('%d/%m/%Y') if facture.date_echeance else 'N/A'})\")\n    # Exécuter la mise à jour automatique\n    print(\"\\\\n🔄 Exécution de la mise à jour automatique...\")",
        "detail": "test_statuts_manage",
        "documentation": {}
    },
    {
        "label": "test_verification_statuts",
        "kind": 2,
        "importPath": "test_statuts_manage",
        "description": "test_statuts_manage",
        "peekOfCode": "def test_verification_statuts():\n    print(\"\\\\n🧪 Test 3: Vérification des statuts\")\n    print(\"=\" * 50)\n    factures = Facturation.objects.filter(description__icontains=\"Test\")\n    erreurs = []\n    for facture in factures:\n        statut_attendu = None\n        jours_retard = 0\n        # Calculer le retard\n        if facture.date_echeance and facture.date_echeance < timezone.now():",
        "detail": "test_statuts_manage",
        "documentation": {}
    },
    {
        "label": "test_statistiques",
        "kind": 2,
        "importPath": "test_statuts_manage",
        "description": "test_statuts_manage",
        "peekOfCode": "def test_statistiques():\n    print(\"\\\\n🧪 Test 4: Statistiques des statuts\")\n    print(\"=\" * 50)\n    stats = {\n        'en_attente': Facturation.objects.filter(statut='en_attente').count(),\n        'en_retard': Facturation.objects.filter(statut='en_retard').count(),\n        'impaye': Facturation.objects.filter(statut='impaye').count(),\n        'contentieux': Facturation.objects.filter(statut='contentieux').count(),\n        'paye': Facturation.objects.filter(statut='paye').count(),\n    }",
        "detail": "test_statuts_manage",
        "documentation": {}
    },
    {
        "label": "nettoyer_factures_test",
        "kind": 2,
        "importPath": "test_statuts_manage",
        "description": "test_statuts_manage",
        "peekOfCode": "def nettoyer_factures_test():\n    print(\"\\\\n🧹 Nettoyage des factures de test\")\n    print(\"=\" * 50)\n    try:\n        # Supprimer les factures de test (celles avec \"Test\" dans la description)\n        factures_test = Facturation.objects.filter(description__icontains=\"Test\")\n        nombre_supprimees = factures_test.count()\n        factures_test.delete()\n        print(f\"✅ {nombre_supprimees} factures de test supprimées\")\n        # Supprimer l'établissement de test s'il existe",
        "detail": "test_statuts_manage",
        "documentation": {}
    }
]