[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "update_session_auth_hash",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "validate_email",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "check_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "validate_password",
        "importPath": "django.contrib.auth.password_validation",
        "description": "django.contrib.auth.password_validation",
        "isExtraImport": true,
        "detail": "django.contrib.auth.password_validation",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "connection",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "Etablissement",
        "importPath": "school_admin.model.etablissement_model",
        "description": "school_admin.model.etablissement_model",
        "isExtraImport": true,
        "detail": "school_admin.model.etablissement_model",
        "documentation": {}
    },
    {
        "label": "Etablissement",
        "importPath": "school_admin.model.etablissement_model",
        "description": "school_admin.model.etablissement_model",
        "isExtraImport": true,
        "detail": "school_admin.model.etablissement_model",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "CASCADE",
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "isExtraImport": true,
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "BaseBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "EtablissementController",
        "importPath": "school_admin.controllers.etablissement_controller",
        "description": "school_admin.controllers.etablissement_controller",
        "isExtraImport": true,
        "detail": "school_admin.controllers.etablissement_controller",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "school.asgi",
        "description": "school.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "school.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nimport os\n# ...\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'school_admin/static'),  # Ajouter le chemin des fichiers statiques de l'application\n]\n# Configuration des sessions\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session ne expire pas quand le navigateur est fermé\n# Age de la session en secondes",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'school_admin/static'),  # Ajouter le chemin des fichiers statiques de l'application\n]\n# Configuration des sessions\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session ne expire pas quand le navigateur est fermé\n# Age de la session en secondes\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # 2 semaines\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'school_admin/static'),  # Ajouter le chemin des fichiers statiques de l'application\n]\n# Configuration des sessions\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session ne expire pas quand le navigateur est fermé\n# Age de la session en secondes\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # 2 semaines\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_EXPIRE_AT_BROWSER_CLOSE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "SESSION_EXPIRE_AT_BROWSER_CLOSE = False # La session ne expire pas quand le navigateur est fermé\n# Age de la session en secondes\nSESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # 2 semaines\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-5%&6bpaizqq8n)h7%7i7t&1dci^n+-entc_cy%_w4-aabu57o9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_AGE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 2 # 2 semaines\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-5%&6bpaizqq8n)h7%7i7t&1dci^n+-entc_cy%_w4-aabu57o9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-5%&6bpaizqq8n)h7%7i7t&1dci^n+-entc_cy%_w4-aabu57o9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'school_admin',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'school_admin',\n]\nMIDDLEWARE = [",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'school_admin.middleware.AuthenticationMiddleware',  # Notre middleware d'authentification personnalisé\n]",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "ROOT_URLCONF = 'school.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "WSGI_APPLICATION = 'school.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'goo_school',          # ← Le nom de ta base\n        'USER': 'postgres',             # ← Utilisateur (par défaut postgres)\n        'PASSWORD': 'Ludvanne', # ← Le mot de passe que tu as défini à l'installation\n        'HOST': 'localhost',            # ← Ou 127.0.0.1",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'goo_school',          # ← Le nom de ta base\n        'USER': 'postgres',             # ← Utilisateur (par défaut postgres)\n        'PASSWORD': 'Ludvanne', # ← Le mot de passe que tu as défini à l'installation\n        'HOST': 'localhost',            # ← Ou 127.0.0.1\n        'PORT': '5432',                 # ← Port par défaut de PostgreSQL\n    }\n}",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fr-fr'\nTIME_ZONE = 'Europe/Paris'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "TIME_ZONE = 'Europe/Paris'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Configuration du modèle d'utilisateur personnalisé",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Configuration du modèle d'utilisateur personnalisé\nAUTH_USER_MODEL = 'school_admin.CompteUser'",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Configuration du modèle d'utilisateur personnalisé\nAUTH_USER_MODEL = 'school_admin.CompteUser'\n# Configuration des backends d'authentification",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Configuration du modèle d'utilisateur personnalisé\nAUTH_USER_MODEL = 'school_admin.CompteUser'\n# Configuration des backends d'authentification\nAUTHENTICATION_BACKENDS = [\n    'school_admin.authentication_backends.MultiUserBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Garder le backend par défaut en fallback",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Configuration du modèle d'utilisateur personnalisé\nAUTH_USER_MODEL = 'school_admin.CompteUser'\n# Configuration des backends d'authentification\nAUTHENTICATION_BACKENDS = [\n    'school_admin.authentication_backends.MultiUserBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Garder le backend par défaut en fallback\n]\n# Configuration des fichiers média\nMEDIA_URL = '/media/'",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'school_admin.CompteUser'\n# Configuration des backends d'authentification\nAUTHENTICATION_BACKENDS = [\n    'school_admin.authentication_backends.MultiUserBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Garder le backend par défaut en fallback\n]\n# Configuration des fichiers média\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configuration du logging pour le débogage",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'school_admin.authentication_backends.MultiUserBackend',\n    'django.contrib.auth.backends.ModelBackend',  # Garder le backend par défaut en fallback\n]\n# Configuration des fichiers média\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configuration du logging pour le débogage\nLOGGING = {\n    'version': 1,",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configuration du logging pour le débogage\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Configuration du logging pour le débogage\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "school.settings",
        "description": "school.settings",
        "peekOfCode": "LOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'root': {\n        'handlers': ['console'],",
        "detail": "school.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school.urls",
        "description": "school.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('school_admin.urls', namespace='school_admin')),\n    path('', include('school_admin.personal_url.directeur_url', namespace='directeur')),\n]\n# Servir les fichiers média en mode développement\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "school.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "school.wsgi",
        "description": "school.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "school.wsgi",
        "documentation": {}
    },
    {
        "label": "AdministrateurCompteController",
        "kind": 6,
        "importPath": "school_admin.controllers.administrateur_compte_controller",
        "description": "school_admin.controllers.administrateur_compte_controller",
        "peekOfCode": "class AdministrateurCompteController:\n    @staticmethod\n    def get_user_compte_administrateur(request):\n        \"\"\"\n        Vue pour la création d'un compte administrateur\n        \"\"\"\n        user = request.user\n        if user.is_authenticated and user.fonction == 'administrateur':\n            return user\n        else:",
        "detail": "school_admin.controllers.administrateur_compte_controller",
        "documentation": {}
    },
    {
        "label": "CommercialCompteController",
        "kind": 6,
        "importPath": "school_admin.controllers.commercial_compte_controller",
        "description": "school_admin.controllers.commercial_compte_controller",
        "peekOfCode": "class CommercialCompteController:\n    \"\"\"\n    Contrôleur pour la gestion des comptes commerciaux\n    \"\"\"\n    @staticmethod\n    def get_user_compte_commercial(request):\n        \"\"\"\n        Vue pour la création d'un compte commercial\n        \"\"\"\n        #recupere les informations du compte commercial connecte",
        "detail": "school_admin.controllers.commercial_compte_controller",
        "documentation": {}
    },
    {
        "label": "CompteUserController",
        "kind": 6,
        "importPath": "school_admin.controllers.compte_user_controller",
        "description": "school_admin.controllers.compte_user_controller",
        "peekOfCode": "class CompteUserController:\n    @staticmethod\n    def compte_user_register_view(request):\n        # Initialisation des données pour pré-remplir en cas d'erreur\n        form_data = {}\n        field_errors = {}\n        if request.method == 'POST':\n            # Récupération des données\n            form_data = {\n                'nom': request.POST.get('nom', '').strip(),",
        "detail": "school_admin.controllers.compte_user_controller",
        "documentation": {}
    },
    {
        "label": "EtablissementController",
        "kind": 6,
        "importPath": "school_admin.controllers.etablissement_controller",
        "description": "school_admin.controllers.etablissement_controller",
        "peekOfCode": "class EtablissementController:\n    \"\"\"\n    Contrôleur pour gérer toutes les actions liées aux établissements\n    \"\"\"\n    @staticmethod\n    def generate_etablissement_code(type_etablissement):\n        \"\"\"\n        Génère un code unique pour un établissement avec un préfixe basé sur le type\n        Args:\n            type_etablissement (str): Le type d'établissement ('primary', 'secondary', 'highschool')",
        "detail": "school_admin.controllers.etablissement_controller",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.controllers.etablissement_controller",
        "description": "school_admin.controllers.etablissement_controller",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass EtablissementController:\n    \"\"\"\n    Contrôleur pour gérer toutes les actions liées aux établissements\n    \"\"\"\n    @staticmethod\n    def generate_etablissement_code(type_etablissement):\n        \"\"\"\n        Génère un code unique pour un établissement avec un préfixe basé sur le type\n        Args:",
        "detail": "school_admin.controllers.etablissement_controller",
        "documentation": {}
    },
    {
        "label": "ProspectionController",
        "kind": 6,
        "importPath": "school_admin.controllers.prospection_controller",
        "description": "school_admin.controllers.prospection_controller",
        "peekOfCode": "class ProspectionController:\n    @staticmethod\n    def ajouter_prospection(request):\n        if request.method == 'POST':\n            is_valid = True\n            field_errors = {}\n            form_data = {\n                'nom_etablissement': request.POST.get('nom_etablissement', ''),\n                'type_etablissement': request.POST.get('type_etablissement', ''),\n                'genre_etablissement': request.POST.get('genre_etablissement', ''),",
        "detail": "school_admin.controllers.prospection_controller",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "school_admin.management.commands.generate_etablissement_codes",
        "description": "school_admin.management.commands.generate_etablissement_codes",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Génère des codes uniques pour tous les établissements existants'\n    def generate_etablissement_code(self, type_etablissement):\n        \"\"\"\n        Génère un code unique pour un établissement avec un préfixe basé sur le type\n        \"\"\"\n        # Définir le préfixe en fonction du type d'établissement\n        prefixes = {\n            'primary': 'PRI-',\n            'secondary': 'COL-',",
        "detail": "school_admin.management.commands.generate_etablissement_codes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0001_initial",
        "description": "school_admin.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompteUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "school_admin.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0002_etablissement_last_login_etablissement_password_and_more",
        "description": "school_admin.migrations.0002_etablissement_last_login_etablissement_password_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='last_login',\n            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),\n        ),",
        "detail": "school_admin.migrations.0002_etablissement_last_login_etablissement_password_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0003_prospection",
        "description": "school_admin.migrations.0003_prospection",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0002_etablissement_last_login_etablissement_password_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Prospection',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nom_etablissement', models.CharField(max_length=255, verbose_name='Nom de la prospection')),",
        "detail": "school_admin.migrations.0003_prospection",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0004_prospection_cree_par",
        "description": "school_admin.migrations.0004_prospection_cree_par",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0003_prospection'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='prospection',\n            name='cree_par',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Créé par'),\n        ),",
        "detail": "school_admin.migrations.0004_prospection_cree_par",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0005_alter_prospection_notes_commercial_and_more",
        "description": "school_admin.migrations.0005_alter_prospection_notes_commercial_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0004_prospection_cree_par'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='prospection',\n            name='notes_commercial',\n            field=models.TextField(blank=True, null=True, verbose_name='Notes de la prospection'),\n        ),",
        "detail": "school_admin.migrations.0005_alter_prospection_notes_commercial_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0006_alter_prospection_adresse_etablissement_and_more",
        "description": "school_admin.migrations.0006_alter_prospection_adresse_etablissement_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0005_alter_prospection_notes_commercial_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='prospection',\n            name='adresse_etablissement',\n            field=models.TextField(verbose_name='Adresse complète'),\n        ),",
        "detail": "school_admin.migrations.0006_alter_prospection_adresse_etablissement_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0007_prospection_notes_rendezvous",
        "description": "school_admin.migrations.0007_prospection_notes_rendezvous",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0006_alter_prospection_adresse_etablissement_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='prospection',\n            name='notes_rendezvous',\n            field=models.TextField(blank=True, null=True, verbose_name='Notes de rendez-vous'),\n        ),",
        "detail": "school_admin.migrations.0007_prospection_notes_rendezvous",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0008_notecommercial_rendezvous",
        "description": "school_admin.migrations.0008_notecommercial_rendezvous",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0007_prospection_notes_rendezvous'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='NoteCommercial',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('contenu', models.TextField(verbose_name='Contenu de la note')),",
        "detail": "school_admin.migrations.0008_notecommercial_rendezvous",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0009_compterendu",
        "description": "school_admin.migrations.0009_compterendu",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0008_notecommercial_rendezvous'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompteRendu',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('titre', models.CharField(max_length=255, verbose_name='Titre du compte rendu')),",
        "detail": "school_admin.migrations.0009_compterendu",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0010_remove_compterendu_duree_visite_and_more",
        "description": "school_admin.migrations.0010_remove_compterendu_duree_visite_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0009_compterendu'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='compterendu',\n            name='duree_visite',\n        ),\n        migrations.RemoveField(",
        "detail": "school_admin.migrations.0010_remove_compterendu_duree_visite_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0011_messagecommercial_reponsemessage",
        "description": "school_admin.migrations.0011_messagecommercial_reponsemessage",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0010_remove_compterendu_duree_visite_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='MessageCommercial',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('sujet', models.CharField(max_length=255, verbose_name='Sujet du message')),",
        "detail": "school_admin.migrations.0011_messagecommercial_reponsemessage",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0012_messagecommercial_date_prise_en_charge_and_more",
        "description": "school_admin.migrations.0012_messagecommercial_date_prise_en_charge_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0011_messagecommercial_reponsemessage'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='messagecommercial',\n            name='date_prise_en_charge',\n            field=models.DateTimeField(blank=True, null=True, verbose_name='Date de prise en charge'),\n        ),",
        "detail": "school_admin.migrations.0012_messagecommercial_date_prise_en_charge_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0013_alter_prospection_statut_etablissement",
        "description": "school_admin.migrations.0013_alter_prospection_statut_etablissement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0012_messagecommercial_date_prise_en_charge_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='prospection',\n            name='statut_etablissement',\n            field=models.CharField(choices=[('nouveau', 'Nouveau'), ('contacte', 'Contacté'), ('rdv_planifie', 'RDV planifié'), ('proposition', 'Proposition'), ('contrat_signe', 'Contrat signé')], max_length=255, verbose_name=\"Statut d'établissement\"),\n        ),",
        "detail": "school_admin.migrations.0013_alter_prospection_statut_etablissement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0014_prospection_genre_etablissement_and_more",
        "description": "school_admin.migrations.0014_prospection_genre_etablissement_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0013_alter_prospection_statut_etablissement'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='prospection',\n            name='genre_etablissement',\n            field=models.CharField(choices=[('public', 'Public'), ('prive', 'Privé'), ('confessionnel', 'Confessionnel')], default='', max_length=255, verbose_name=\"Genre d'établissement\"),\n            preserve_default=False,",
        "detail": "school_admin.migrations.0014_prospection_genre_etablissement_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0015_add_modules_to_etablissement",
        "description": "school_admin.migrations.0015_add_modules_to_etablissement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0014_prospection_genre_etablissement_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='module_censora',\n            field=models.BooleanField(default=False, verbose_name='Censora'),\n        ),",
        "detail": "school_admin.migrations.0015_add_modules_to_etablissement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0016_add_premium_modules_to_etablissement",
        "description": "school_admin.migrations.0016_add_premium_modules_to_etablissement",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0015_add_modules_to_etablissement'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='module_activites',\n            field=models.BooleanField(default=False, verbose_name='Activités extra-scolaires'),\n        ),",
        "detail": "school_admin.migrations.0016_add_premium_modules_to_etablissement",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0017_rename_censora_to_censure",
        "description": "school_admin.migrations.0017_rename_censora_to_censure",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0016_add_premium_modules_to_etablissement'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='etablissement',\n            name='module_censora',\n        ),\n        migrations.AddField(",
        "detail": "school_admin.migrations.0017_rename_censora_to_censure",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0018_rename_censure_to_sensores",
        "description": "school_admin.migrations.0018_rename_censure_to_sensores",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0017_rename_censora_to_censure'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='etablissement',\n            name='module_censure',\n        ),\n        migrations.AddField(",
        "detail": "school_admin.migrations.0018_rename_censure_to_sensores",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0019_rename_sensores_to_censeurs",
        "description": "school_admin.migrations.0019_rename_sensores_to_censeurs",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0018_rename_censure_to_sensores'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='etablissement',\n            name='module_sensores',\n        ),\n        migrations.AddField(",
        "detail": "school_admin.migrations.0019_rename_sensores_to_censeurs",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0020_alter_etablissement_managers_and_more",
        "description": "school_admin.migrations.0020_alter_etablissement_managers_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('school_admin', '0019_rename_sensores_to_censeurs'),\n    ]\n    operations = [\n        migrations.AlterModelManagers(\n            name='etablissement',\n            managers=[\n                ('objects', django.contrib.auth.models.UserManager()),",
        "detail": "school_admin.migrations.0020_alter_etablissement_managers_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0021_auto_20251002_2327",
        "description": "school_admin.migrations.0021_auto_20251002_2327",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0020_alter_etablissement_managers_and_more'),\n    ]\n    operations = [\n    ]",
        "detail": "school_admin.migrations.0021_auto_20251002_2327",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0022_alter_compteuser_groups_and_more",
        "description": "school_admin.migrations.0022_alter_compteuser_groups_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('school_admin', '0021_auto_20251002_2327'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='compteuser',\n            name='groups',\n            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='compteuser_set', related_query_name='compteuser', to='auth.group', verbose_name='groups'),",
        "detail": "school_admin.migrations.0022_alter_compteuser_groups_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0023_add_missing_abstractuser_fields",
        "description": "school_admin.migrations.0023_add_missing_abstractuser_fields",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0022_alter_compteuser_groups_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='etablissement',\n            name='is_superuser',\n            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),\n        ),",
        "detail": "school_admin.migrations.0023_add_missing_abstractuser_fields",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school_admin.migrations.0024_add_etablissement_manytomany_tables",
        "description": "school_admin.migrations.0024_add_etablissement_manytomany_tables",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school_admin', '0023_add_missing_abstractuser_fields'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='EtablissementGroups',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('etablissement', models.ForeignKey(on_delete=CASCADE, to='school_admin.etablissement')),",
        "detail": "school_admin.migrations.0024_add_etablissement_manytomany_tables",
        "documentation": {}
    },
    {
        "label": "CompteRendu",
        "kind": 6,
        "importPath": "school_admin.model.compte_rendu_model",
        "description": "school_admin.model.compte_rendu_model",
        "peekOfCode": "class CompteRendu(models.Model):\n    \"\"\"\n    Modèle pour les comptes rendus de visite liés à un établissement\n    \"\"\"\n    # On crée le champ \"etablissement\" de type foreign key et on importe le modèle Prospection\n    etablissement = models.ForeignKey(\n        'school_admin.Prospection', # On importe le modèle Prospection\n        on_delete=models.CASCADE, # On supprime le compte rendu si l'établissement est supprimé\n        related_name='comptes_rendus', # On nomme la relation \"comptes_rendus\"\n        verbose_name=\"Établissement\" # On nomme le champ \"Établissement\"",
        "detail": "school_admin.model.compte_rendu_model",
        "documentation": {}
    },
    {
        "label": "CompteUser",
        "kind": 6,
        "importPath": "school_admin.model.compte_user",
        "description": "school_admin.model.compte_user",
        "peekOfCode": "class CompteUser(AbstractUser):\n    # Champs personnalisés\n    TYPE_COMPTE_CHOICES = [\n        ('administrateur', 'Administrateur'),\n        ('membre', 'Membre de l\\'équipe'),\n    ]\n    DEPARTEMENT_CHOICES = [\n        ('technique', 'Technique'),\n        ('support', 'Support Client'),\n        ('commercial', 'Commercial & Ventes'),",
        "detail": "school_admin.model.compte_user",
        "documentation": {}
    },
    {
        "label": "Etablissement",
        "kind": 6,
        "importPath": "school_admin.model.etablissement_model",
        "description": "school_admin.model.etablissement_model",
        "peekOfCode": "class Etablissement(AbstractUser):\n    \"\"\"\n    Modèle représentant un établissement scolaire\n    \"\"\"\n    TYPE_CHOICES = [\n        ('primary', 'École Primaire'),\n        ('collège', 'Collège'),\n        ('lycée', 'Lycée'),\n    ]\n    # Code unique de l'établissement",
        "detail": "school_admin.model.etablissement_model",
        "documentation": {}
    },
    {
        "label": "MessageCommercial",
        "kind": 6,
        "importPath": "school_admin.model.message_model",
        "description": "school_admin.model.message_model",
        "peekOfCode": "class MessageCommercial(models.Model):\n    \"\"\"\n    Modèle pour les messages commerciaux\n    \"\"\"\n    # Types de messages\n    TYPE_MESSAGE_CHOICES = [\n        ('demande_info', 'Demande d\\'information'),\n        ('proposition', 'Proposition commerciale'),\n        ('suivi', 'Suivi de prospection'),\n        ('rendez_vous', 'Rendez-vous'),",
        "detail": "school_admin.model.message_model",
        "documentation": {}
    },
    {
        "label": "ReponseMessage",
        "kind": 6,
        "importPath": "school_admin.model.message_model",
        "description": "school_admin.model.message_model",
        "peekOfCode": "class ReponseMessage(models.Model):\n    \"\"\"\n    Modèle pour les réponses aux messages\n    \"\"\"\n    message_original = models.ForeignKey(\n        MessageCommercial,\n        on_delete=models.CASCADE,\n        related_name='reponses',\n        verbose_name=\"Message original\"\n    )",
        "detail": "school_admin.model.message_model",
        "documentation": {}
    },
    {
        "label": "NoteCommercial",
        "kind": 6,
        "importPath": "school_admin.model.note_commercial_model",
        "description": "school_admin.model.note_commercial_model",
        "peekOfCode": "class NoteCommercial(models.Model):\n    \"\"\"\n    Modèle pour les notes commerciales liées à un établissement\n    \"\"\"\n    # On importe le modèle Prospection\n    etablissement = models.ForeignKey(\n        'school_admin.Prospection', # On importe le modèle Prospection\n        on_delete=models.CASCADE, # On supprime la note si l'établissement est supprimé\n        related_name='notes_commerciales', # On nomme la relation \"notes_commerciales\"\n        verbose_name=\"Établissement\" # On nomme le champ \"Établissement\"",
        "detail": "school_admin.model.note_commercial_model",
        "documentation": {}
    },
    {
        "label": "Prospection",
        "kind": 6,
        "importPath": "school_admin.model.prospection_model",
        "description": "school_admin.model.prospection_model",
        "peekOfCode": "class Prospection(models.Model):\n    # On crée le champ \"type_etablissement\" de type choix\n    TYPE_CHOICES = [\n        ('primaire', 'École primaire'),\n        ('college', 'Collège'),\n        ('lycee', 'Lycée'),\n        ('universite', 'Université'),\n        ('autre', 'Autre'),\n    ]\n    # On crée le champ \"genre_etablissement\" de type choix",
        "detail": "school_admin.model.prospection_model",
        "documentation": {}
    },
    {
        "label": "RendezVous",
        "kind": 6,
        "importPath": "school_admin.model.rendez_vous_model",
        "description": "school_admin.model.rendez_vous_model",
        "peekOfCode": "class RendezVous(models.Model):\n    \"\"\"\n    Modèle pour les rendez-vous liés à un établissement\n    \"\"\"\n    # On crée le champ \"type_rdv\" de type choix\n    TYPE_RDV_CHOICES = [\n        ('appel_telephonique', 'Appel téléphonique'),\n        ('visite_site', 'Visite sur site'),\n        ('presentation_online', 'Présentation en ligne'),\n        ('dejeuner_affaires', 'Déjeuner d\\'affaires'),",
        "detail": "school_admin.model.rendez_vous_model",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.personal_url.directeur_url",
        "description": "school_admin.personal_url.directeur_url",
        "peekOfCode": "app_name = 'directeur'  # ← Changement du namespace pour éviter le conflit\nurlpatterns = [\n    path('dashboard/directeur/', dashboard_directeur, name='dashboard_directeur'),\n]",
        "detail": "school_admin.personal_url.directeur_url",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "school_admin.personal_url.directeur_url",
        "description": "school_admin.personal_url.directeur_url",
        "peekOfCode": "urlpatterns = [\n    path('dashboard/directeur/', dashboard_directeur, name='dashboard_directeur'),\n]",
        "detail": "school_admin.personal_url.directeur_url",
        "documentation": {}
    },
    {
        "label": "dashboard_administrateur",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def dashboard_administrateur(request):\n    \"\"\"\n    Tableau de bord pour les administrateurs\n    \"\"\"\n   # Vérifier si l'utilisateur est connecté\n    if not request.user.is_authenticated:\n        return redirect('school_admin:connexion_compte_user')\n    # Rediriger vers le tableau de bord approprié selon la fonction\n    if hasattr(request.user, 'fonction'):\n        fonction = request.user.fonction",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "etablissements",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def etablissements(request):\n    \"\"\"\n    Gestion des établissements (protégé)\n    \"\"\"\n    user_administrateur = AdministrateurCompteController.get_user_compte_administrateur(request)\n    # Récupérer les paramètres de filtrage\n    search_query = request.GET.get('search', '')\n    type_filter = request.GET.get('type', '')\n    status_filter = request.GET.get('status', '')\n    page = request.GET.get('page', 1)",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "ajout_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def ajout_etablissement(request):\n    \"\"\"\n    Ajout d'un établissement (protégé)\n    \"\"\"\n    if request.method == 'POST':\n        # Utiliser le contrôleur pour traiter l'ajout d'établissement\n        context, response = EtablissementController.process_ajout_etablissement(request)\n        if response:\n            return response\n        # Si pas de redirection, afficher le template avec les erreurs",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "detaille_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def detaille_etablissement(request):\n    \"\"\"\n    Détails d'un établissement (protégé)\n    \"\"\"\n    etablissement_id = request.GET.get('id', None)\n    etablissement = EtablissementController.get_etablissement_by_id(etablissement_id)\n    if not etablissement:\n        messages.error(request, \"Établissement non trouvé.\")\n        return redirect('school_admin:etablissements')\n    # Affichage du formulaire avec les données actuelles",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "administrateur_update_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def administrateur_update_etablissement(request):\n    \"\"\"\n    Vue spéciale pour la mise à jour des paramètres d'un établissement\n    \"\"\"\n    # Récupérer l'ID de l'établissement depuis le formulaire\n    etablissement_id = request.POST.get('etablissement_id')\n    if not etablissement_id:\n        messages.error(request, \"ID de l'établissement manquant.\")\n        return redirect('school_admin:etablissements')\n    etablissement = EtablissementController.get_etablissement_by_id(etablissement_id)",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "message_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def message_etablissement(request):\n    \"\"\"\n    Messages des établissements (protégé)\n    \"\"\"\n    return render(request, 'school_admin/etablissements/message_etablissement.html')\ndef detail_message(request):\n    \"\"\"\n    Détails d'un message (protégé)\n    \"\"\"\n    return render(request, 'school_admin/etablissements/detaille_message.html')",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "detail_message",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def detail_message(request):\n    \"\"\"\n    Détails d'un message (protégé)\n    \"\"\"\n    return render(request, 'school_admin/etablissements/detaille_message.html')\ndef annonces(request):\n    \"\"\"\n    Gestion des annonces (protégé)\n    \"\"\"\n    return render(request, 'school_admin/annonces.html')",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "annonces",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def annonces(request):\n    \"\"\"\n    Gestion des annonces (protégé)\n    \"\"\"\n    return render(request, 'school_admin/annonces.html')\ndef parametres(request):\n    \"\"\"\n    Paramètres du système (protégé)\n    \"\"\"\n    return render(request, 'school_admin/profil_admin.html')",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "parametres",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def parametres(request):\n    \"\"\"\n    Paramètres du système (protégé)\n    \"\"\"\n    return render(request, 'school_admin/profil_admin.html')\ndef management_equipes(request):\n    \"\"\"\n    Gestion des équipes\n    \"\"\"\n    # Récupérer tous les utilisateurs sauf les administrateurs",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "management_equipes",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def management_equipes(request):\n    \"\"\"\n    Gestion des équipes\n    \"\"\"\n    # Récupérer tous les utilisateurs sauf les administrateurs\n    team_members = CompteUser.objects.exclude(fonction='administrateur').order_by('nom', 'prenom')\n    # Statistiques par fonction\n    team_stats = {\n        'commercial': team_members.filter(fonction='commercial').count(),\n        'developpeur': team_members.filter(fonction='developpeur').count(),",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "commercial_profile",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def commercial_profile(request, commercial_id):\n    \"\"\"\n    Profil détaillé d'un commercial avec toutes ses activités\n    \"\"\"\n    from ..model.prospection_model import Prospection\n    from ..model.rendez_vous_model import RendezVous\n    from ..model.note_commercial_model import NoteCommercial\n    from ..model.compte_rendu_model import CompteRendu\n    from django.db.models import Count, Q\n    from django.utils import timezone",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "add_team_member",
        "kind": 2,
        "importPath": "school_admin.personal_views.administrateur_view",
        "description": "school_admin.personal_views.administrateur_view",
        "peekOfCode": "def add_team_member(request):\n    \"\"\"\n    Ajouter un membre d'équipe\n    \"\"\"\n    return render(request, 'school_admin/add_team_member.html')",
        "detail": "school_admin.personal_views.administrateur_view",
        "documentation": {}
    },
    {
        "label": "dashboard_commercial",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def dashboard_commercial(request):\n    \"\"\"\n    Tableau de bord pour les commerciaux\n    Affiche les statistiques, les rendez-vous à venir, les établissements à prospecter, etc.\n    \"\"\"\n    # Récupérer les statistiques spécifiques aux commerciaux\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_ajouter_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_ajouter_etablissement(request):\n    \"\"\"\n    Vue pour l'ajout d'un établissement\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    if request.method == 'POST':\n        # Utiliser le contrôleur de prospection pour traiter les données",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_liste_etablissements",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_liste_etablissements(request):\n    \"\"\"\n    Vue pour lister les établissements du commercial\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer les paramètres de recherche et filtres\n    search_query = request.GET.get('search', '')",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_update_status",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_update_status(request, etablissement_id):\n    \"\"\"\n    Vue pour mettre à jour le statut d'un établissement\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_update_priority",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_update_priority(request, etablissement_id):\n    \"\"\"\n    Vue pour mettre à jour la priorité d'un établissement\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_add_notes",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_add_notes(request, etablissement_id):\n    \"\"\"\n    Vue pour ajouter une note commerciale\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_schedule_meeting",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_schedule_meeting(request, etablissement_id):\n    \"\"\"\n    Vue pour programmer un rendez-vous\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_update_general_info",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_update_general_info(request, etablissement_id):\n    \"\"\"\n    Vue pour mettre à jour les informations générales d'un établissement\n    \"\"\"\n    try:\n        etablissement = Prospection.objects.get(\n            id=etablissement_id,\n            cree_par=request.user if request.user.is_authenticated else None,\n            actif=True\n        )",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_update_location",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_update_location(request, etablissement_id):\n    \"\"\"\n    Vue pour mettre à jour la localisation d'un établissement\n    \"\"\"\n    try:\n        etablissement = Prospection.objects.get(\n            id=etablissement_id,\n            cree_par=request.user if request.user.is_authenticated else None,\n            actif=True\n        )",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_delete_meeting",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_delete_meeting(request, etablissement_id):\n    \"\"\"\n    Vue pour supprimer un rendez-vous\n    \"\"\"\n    try:\n        etablissement = Prospection.objects.get(\n            id=etablissement_id,\n            cree_par=request.user if request.user.is_authenticated else None,\n            actif=True\n        )",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_delete_note",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_delete_note(request, etablissement_id):\n    \"\"\"\n    Vue pour supprimer une note commerciale\n    \"\"\"\n    try:\n        etablissement = Prospection.objects.get(\n            id=etablissement_id,\n            cree_par=request.user if request.user.is_authenticated else None,\n            actif=True\n        )",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_detail_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_detail_etablissement(request, etablissement_id):\n    \"\"\"\n    Vue pour afficher les détails d'un établissement avec les options de prospection\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        etablissement = Prospection.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_rendez_vous",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_rendez_vous(request):\n    \"\"\"\n    Vue pour afficher tous les rendez-vous programmés\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer tous les rendez-vous du commercial connecté\n    rendez_vous_list = RendezVous.objects.filter(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_comptes_rendus",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_comptes_rendus(request):\n    \"\"\"\n    Vue pour afficher et gérer les comptes rendus de visite\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer tous les comptes rendus du commercial connecté\n    comptes_rendus_list = CompteRendu.objects.filter(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_creer_rapport",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_creer_rapport(request, rendez_vous_id):\n    \"\"\"\n    Vue pour créer un rapport de visite basé sur un rendez-vous\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    try:\n        rendez_vous = RendezVous.objects.get(",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_messages",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_messages(request):\n    \"\"\"\n    Vue pour afficher la liste des messages commerciaux avec système de tickets\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer les paramètres de recherche et filtres\n    search_query = request.GET.get('search', '')",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_conversation_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_conversation_etablissement(request):\n    \"\"\"\n    Vue pour afficher les détails d'un message\n    \"\"\"\n    return render(request, 'school_admin/commercial/conversation_etablissement.html')\n@commercial_required\ndef commercial_profil(request):\n    \"\"\"\n    Vue pour afficher et modifier le profil du commercial\n    \"\"\"",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "commercial_profil",
        "kind": 2,
        "importPath": "school_admin.personal_views.commercial_view",
        "description": "school_admin.personal_views.commercial_view",
        "peekOfCode": "def commercial_profil(request):\n    \"\"\"\n    Vue pour afficher et modifier le profil du commercial\n    \"\"\"\n    user_commercial = CommercialCompteController.get_user_compte_commercial(request)\n    if not user_commercial:\n        messages.error(request, \"Erreur lors de la récupération des données commerciales.\")\n        return redirect('school_admin:connexion_compte_user')\n    commercial = request.user\n    # Traitement de la mise à jour du profil",
        "detail": "school_admin.personal_views.commercial_view",
        "documentation": {}
    },
    {
        "label": "dashboard_comptable",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def dashboard_comptable(request):\n    # Vue simple pour le tableau de bord comptable\n    # Les données sont maintenant statiques dans le HTML\n    return render(request, 'school_admin/gestion_comptable/dashboard_comptable.html')\ndef suivi_revenus(request):\n    # Vue pour le suivi des revenus avec onglets Entrées/Dépenses\n    return render(request, 'school_admin/gestion_comptable/suivi_revenus.html')\ndef paiements_retard(request):\n    # Vue pour le suivi des paiements en retard\n    return render(request, 'school_admin/gestion_comptable/paiements_retard.html')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "suivi_revenus",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def suivi_revenus(request):\n    # Vue pour le suivi des revenus avec onglets Entrées/Dépenses\n    return render(request, 'school_admin/gestion_comptable/suivi_revenus.html')\ndef paiements_retard(request):\n    # Vue pour le suivi des paiements en retard\n    return render(request, 'school_admin/gestion_comptable/paiements_retard.html')\ndef calculs_automatiques(request):\n    # Vue pour les calculs automatiques\n    return render(request, 'school_admin/gestion_comptable/calculs_automatiques.html')\ndef rapports_mensuels(request):",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "paiements_retard",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def paiements_retard(request):\n    # Vue pour le suivi des paiements en retard\n    return render(request, 'school_admin/gestion_comptable/paiements_retard.html')\ndef calculs_automatiques(request):\n    # Vue pour les calculs automatiques\n    return render(request, 'school_admin/gestion_comptable/calculs_automatiques.html')\ndef rapports_mensuels(request):\n    # Vue pour les rapports mensuels (bilan mensuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_mensuels.html')\ndef rapports_annuels(request):",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "calculs_automatiques",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def calculs_automatiques(request):\n    # Vue pour les calculs automatiques\n    return render(request, 'school_admin/gestion_comptable/calculs_automatiques.html')\ndef rapports_mensuels(request):\n    # Vue pour les rapports mensuels (bilan mensuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_mensuels.html')\ndef rapports_annuels(request):\n    # Vue pour les rapports annuels (bilan annuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_annuels.html')\ndef gestion_etablissements(request):",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "rapports_mensuels",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def rapports_mensuels(request):\n    # Vue pour les rapports mensuels (bilan mensuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_mensuels.html')\ndef rapports_annuels(request):\n    # Vue pour les rapports annuels (bilan annuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_annuels.html')\ndef gestion_etablissements(request):\n    # Vue pour la gestion des établissements et factures\n    return render(request, 'school_admin/gestion_comptable/gestion_etablissements.html')\ndef details_financiers_etablissement(request):",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "rapports_annuels",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def rapports_annuels(request):\n    # Vue pour les rapports annuels (bilan annuel)\n    return render(request, 'school_admin/gestion_comptable/rapports_annuels.html')\ndef gestion_etablissements(request):\n    # Vue pour la gestion des établissements et factures\n    return render(request, 'school_admin/gestion_comptable/gestion_etablissements.html')\ndef details_financiers_etablissement(request):\n    # Vue pour les détails financiers d'un établissement\n    return render(request, 'school_admin/gestion_comptable/details_financiers_etablissement.html')\ndef facture_etablissement(request):",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "gestion_etablissements",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def gestion_etablissements(request):\n    # Vue pour la gestion des établissements et factures\n    return render(request, 'school_admin/gestion_comptable/gestion_etablissements.html')\ndef details_financiers_etablissement(request):\n    # Vue pour les détails financiers d'un établissement\n    return render(request, 'school_admin/gestion_comptable/details_financiers_etablissement.html')\ndef facture_etablissement(request):\n    # Vue pour afficher la facture d'un établissement\n    return render(request, 'school_admin/gestion_comptable/facture_etablissement.html')\ndef gestion_personnel_financier(request):",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "details_financiers_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def details_financiers_etablissement(request):\n    # Vue pour les détails financiers d'un établissement\n    return render(request, 'school_admin/gestion_comptable/details_financiers_etablissement.html')\ndef facture_etablissement(request):\n    # Vue pour afficher la facture d'un établissement\n    return render(request, 'school_admin/gestion_comptable/facture_etablissement.html')\ndef gestion_personnel_financier(request):\n    # Vue pour la gestion financière du personnel\n    return render(request, 'school_admin/gestion_comptable/gestion_personnel_financier.html')\ndef gestion_depenses(request):",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "facture_etablissement",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def facture_etablissement(request):\n    # Vue pour afficher la facture d'un établissement\n    return render(request, 'school_admin/gestion_comptable/facture_etablissement.html')\ndef gestion_personnel_financier(request):\n    # Vue pour la gestion financière du personnel\n    return render(request, 'school_admin/gestion_comptable/gestion_personnel_financier.html')\ndef gestion_depenses(request):\n    # Vue pour la gestion des dépenses\n    return render(request, 'school_admin/gestion_comptable/gestion_depenses.html')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "gestion_personnel_financier",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def gestion_personnel_financier(request):\n    # Vue pour la gestion financière du personnel\n    return render(request, 'school_admin/gestion_comptable/gestion_personnel_financier.html')\ndef gestion_depenses(request):\n    # Vue pour la gestion des dépenses\n    return render(request, 'school_admin/gestion_comptable/gestion_depenses.html')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "gestion_depenses",
        "kind": 2,
        "importPath": "school_admin.personal_views.comptable_view",
        "description": "school_admin.personal_views.comptable_view",
        "peekOfCode": "def gestion_depenses(request):\n    # Vue pour la gestion des dépenses\n    return render(request, 'school_admin/gestion_comptable/gestion_depenses.html')",
        "detail": "school_admin.personal_views.comptable_view",
        "documentation": {}
    },
    {
        "label": "dashboard_directeur",
        "kind": 2,
        "importPath": "school_admin.personal_views.directeur_view",
        "description": "school_admin.personal_views.directeur_view",
        "peekOfCode": "def dashboard_directeur(request):\n    \"\"\"\n    Vue du tableau de bord pour les directeurs d'établissement\n    \"\"\"\n    # Vérifier que l'utilisateur connecté est bien un établissement\n    if not isinstance(request.user, Etablissement):\n        return redirect('school_admin:connexion_compte_user')\n    # Récupérer les informations de l'établissement\n    etablissement = request.user\n    # Préparer le contexte avec les données de l'établissement",
        "detail": "school_admin.personal_views.directeur_view",
        "documentation": {}
    },
    {
        "label": "get_range",
        "kind": 2,
        "importPath": "school_admin.templatetags.pagination_tags",
        "description": "school_admin.templatetags.pagination_tags",
        "peekOfCode": "def get_range(value):\n    \"\"\"\n    Filtre pour générer une liste de nombres de 1 à value\n    Usage:\n    {% for i in total_pages|get_range %}\n        {{ i }}\n    {% endfor %}\n    \"\"\"\n    try:\n        value = int(value)",
        "detail": "school_admin.templatetags.pagination_tags",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "school_admin.templatetags.pagination_tags",
        "description": "school_admin.templatetags.pagination_tags",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef get_range(value):\n    \"\"\"\n    Filtre pour générer une liste de nombres de 1 à value\n    Usage:\n    {% for i in total_pages|get_range %}\n        {{ i }}\n    {% endfor %}\n    \"\"\"",
        "detail": "school_admin.templatetags.pagination_tags",
        "documentation": {}
    },
    {
        "label": "CompteUserAdmin",
        "kind": 6,
        "importPath": "school_admin.admin",
        "description": "school_admin.admin",
        "peekOfCode": "class CompteUserAdmin(UserAdmin):\n    list_display = ('email', 'nom', 'prenom', 'type_compte', 'departement', 'is_active')\n    list_filter = ('type_compte', 'departement', 'is_active')\n    search_fields = ('email', 'nom', 'prenom')\n    ordering = ('email',)  # Utiliser email au lieu de username\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Informations personnelles', {'fields': ('nom', 'prenom', 'telephone', 'date_naissance', 'photo')}),\n        ('Informations professionnelles', {'fields': ('type_compte', 'fonction', 'departement')}),\n        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),",
        "detail": "school_admin.admin",
        "documentation": {}
    },
    {
        "label": "SchoolAdminConfig",
        "kind": 6,
        "importPath": "school_admin.apps",
        "description": "school_admin.apps",
        "peekOfCode": "class SchoolAdminConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'school_admin'",
        "detail": "school_admin.apps",
        "documentation": {}
    },
    {
        "label": "MultiUserBackend",
        "kind": 6,
        "importPath": "school_admin.authentication_backends",
        "description": "school_admin.authentication_backends",
        "peekOfCode": "class MultiUserBackend(BaseBackend):\n    \"\"\"\n    Backend d'authentification personnalisé qui gère à la fois\n    les CompteUser et les Etablissement\n    \"\"\"\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        \"\"\"\n        Authentifie un utilisateur en vérifiant d'abord dans CompteUser,\n        puis dans Etablissement\n        \"\"\"",
        "detail": "school_admin.authentication_backends",
        "documentation": {}
    },
    {
        "label": "commercial_required",
        "kind": 2,
        "importPath": "school_admin.decorators",
        "description": "school_admin.decorators",
        "peekOfCode": "def commercial_required(view_func):\n    \"\"\"\n    Décorateur pour vérifier si l'utilisateur est connecté et est un commercial.\n    Redirige vers la page de connexion si l'utilisateur n'est pas connecté.\n    Redirige vers le tableau de bord approprié si l'utilisateur n'est pas un commercial.\n    \"\"\"\n    @wraps(view_func)\n    def _wrapped_view(request, *args, **kwargs):\n        # Vérifier si l'utilisateur est connecté\n        if not request.user.is_authenticated:",
        "detail": "school_admin.decorators",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "school_admin.decorators",
        "description": "school_admin.decorators",
        "peekOfCode": "def admin_required(view_func):\n    \"\"\"\n    Décorateur pour vérifier si l'utilisateur est connecté et est un administrateur.\n    Redirige vers la page de connexion si l'utilisateur n'est pas connecté.\n    Redirige vers le tableau de bord approprié si l'utilisateur n'est pas un administrateur.\n    \"\"\"\n    @wraps(view_func)\n    def _wrapped_view(request, *args, **kwargs):\n        # Vérifier si l'utilisateur est connecté\n        if not request.user.is_authenticated:",
        "detail": "school_admin.decorators",
        "documentation": {}
    },
    {
        "label": "login_required_with_redirect",
        "kind": 2,
        "importPath": "school_admin.decorators",
        "description": "school_admin.decorators",
        "peekOfCode": "def login_required_with_redirect(view_func):\n    \"\"\"\n    Décorateur pour vérifier si l'utilisateur est connecté.\n    Redirige vers la page de connexion si l'utilisateur n'est pas connecté.\n    \"\"\"\n    @wraps(view_func)\n    def _wrapped_view(request, *args, **kwargs):\n        # Vérifier si l'utilisateur est connecté\n        if not request.user.is_authenticated:\n            next_url = request.path",
        "detail": "school_admin.decorators",
        "documentation": {}
    },
    {
        "label": "AuthenticationMiddleware",
        "kind": 6,
        "importPath": "school_admin.middleware",
        "description": "school_admin.middleware",
        "peekOfCode": "class AuthenticationMiddleware:\n    \"\"\"\n    Middleware pour vérifier l'authentification des utilisateurs et les rediriger\n    vers la page de connexion si nécessaire, ou vers leur tableau de bord approprié.\n    \"\"\"\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        # Liste des URLs qui ne nécessitent pas d'authentification\n        public_urls = [",
        "detail": "school_admin.middleware",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "school_admin.models",
        "description": "school_admin.models",
        "peekOfCode": "__all__ = ['CompteUser', 'Etablissement', 'Prospection', 'NoteCommercial', 'RendezVous']",
        "detail": "school_admin.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "school_admin.urls",
        "description": "school_admin.urls",
        "peekOfCode": "app_name = 'school_admin'\nurlpatterns =[\n    # Autres routes existantes\n    path('', dashboard_administrateur, name='dashboard'),\n    path('etablissements/',etablissements, name='etablissements'),\n    path('etablissements/ajouter', ajout_etablissement, name='ajout_etablissement'),\n    path('etablissements/detaille/', detaille_etablissement, name='detaille_etablissement'),\n    path('etablissements/update/', administrateur_update_etablissement, name='administrateur_update_etablissement'),\n    path('etablissements/messages/', message_etablissement, name='message_etablissement'),\n    path('etablissements/messages/detail/', detail_message, name='detail_message'),",
        "detail": "school_admin.urls",
        "documentation": {}
    },
    {
        "label": "inscription_compte_user",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def inscription_compte_user(request):\n    \"\"\"\n    Gère l'inscription d'un nouvel utilisateur (public)\n    \"\"\"\n    if request.method == 'POST':\n        # Utiliser le contrôleur pour traiter l'inscription\n        result = CompteUserController.compte_user_register_view(request)\n        if isinstance(result, tuple) and len(result) == 2:\n            context, response = result\n            if response:",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "connexion_compte_user",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def connexion_compte_user(request):\n    \"\"\"\n    Gère la connexion d'un utilisateur (public)\n    \"\"\"\n    if request.method == 'POST':\n        # Utiliser le contrôleur pour traiter la connexion\n        result = CompteUserController.compte_user_login_view(request)\n        if isinstance(result, tuple) and len(result) == 2:\n            context, response = result\n            if response:",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_support",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_support(request):\n    \"\"\"\n    Tableau de bord pour le support client\n    \"\"\"\n    context = {\n        'user_function': 'support',\n        'page_title': 'Tableau de bord Support'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_support.html', context)\n# ===== DEVELOPPEUR =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_developpeur",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_developpeur(request):\n    \"\"\"\n    Tableau de bord pour les développeurs\n    \"\"\"\n    context = {\n        'user_function': 'developpeur',\n        'page_title': 'Tableau de bord Développeur'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_developpeur.html', context)\n# ===== MARKETING =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_marketing",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_marketing(request):\n    \"\"\"\n    Tableau de bord pour le marketing\n    \"\"\"\n    context = {\n        'user_function': 'marketing',\n        'page_title': 'Tableau de bord Marketing'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_marketing.html', context)\n# ===== COMPTABLE =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_comptable",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_comptable(request):\n    \"\"\"\n    Tableau de bord pour les comptables\n    \"\"\"\n    context = {\n        'user_function': 'comptable',\n        'page_title': 'Tableau de bord Comptable'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_comptable.html', context)\n# ===== RH =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "dashboard_rh",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def dashboard_rh(request):\n    \"\"\"\n    Tableau de bord pour les ressources humaines\n    \"\"\"\n    context = {\n        'user_function': 'ressources humaines',\n        'page_title': 'Tableau de bord Ressources Humaines'\n    }\n    return render(request, 'school_admin/dashboards/dashboard_rh.html', context)\n# ===== DECONNEXION PAR FONCTION =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "deconnexion_compte_commercial",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def deconnexion_compte_commercial(request):\n    \"\"\"\n    Déconnexion d'un compte commercial\n    \"\"\"\n    return CommercialCompteController.logout_user_commercial(request)\n# ===== ADMINISTRATEUR =====\ndef deconnexion_compte_administrateur(request):\n    \"\"\"\n    Déconnexion d'un compte administrateur\n    \"\"\"",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "deconnexion_compte_administrateur",
        "kind": 2,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "def deconnexion_compte_administrateur(request):\n    \"\"\"\n    Déconnexion d'un compte administrateur\n    \"\"\"\n    return AdministrateurCompteController.logout_user_administrateur(request)\n# ===== SUPPORT =====\n# ===== DEVELOPPEUR =====\n# ===== MARKETING =====\n# ===== COMPTABLE =====\n# ===== RH =====",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "school_admin.views",
        "description": "school_admin.views",
        "peekOfCode": "logger = logging.getLogger(__name__)\n# Create your views here.\ndef inscription_compte_user(request):\n    \"\"\"\n    Gère l'inscription d'un nouvel utilisateur (public)\n    \"\"\"\n    if request.method == 'POST':\n        # Utiliser le contrôleur pour traiter l'inscription\n        result = CompteUserController.compte_user_register_view(request)\n        if isinstance(result, tuple) and len(result) == 2:",
        "detail": "school_admin.views",
        "documentation": {}
    },
    {
        "label": "delete_etablissements_cascade",
        "kind": 2,
        "importPath": "delete_etablissement_cascade",
        "description": "delete_etablissement_cascade",
        "peekOfCode": "def delete_etablissements_cascade():\n    \"\"\"Supprime tous les établissements en gérant les contraintes de clé étrangère\"\"\"\n    with connection.cursor() as cursor:\n        # Compter les établissements\n        cursor.execute(\"SELECT COUNT(*) FROM school_admin_etablissement\")\n        count = cursor.fetchone()[0]\n        print(f\"Nombre d'établissements trouvés : {count}\")\n        if count == 0:\n            print(\"Aucun établissement à supprimer.\")\n            return",
        "detail": "delete_etablissement_cascade",
        "documentation": {}
    },
    {
        "label": "backup_and_delete_etablissements",
        "kind": 2,
        "importPath": "delete_etablissement_data",
        "description": "delete_etablissement_data",
        "peekOfCode": "def backup_and_delete_etablissements():\n    \"\"\"Sauvegarde et supprime tous les établissements\"\"\"\n    # Compter les établissements existants\n    count = Etablissement.objects.count()\n    print(f\"Nombre d'établissements trouvés : {count}\")\n    if count == 0:\n        print(\"Aucun établissement à supprimer.\")\n        return\n    # Sauvegarde des données (optionnel)\n    print(\"Création de la sauvegarde...\")",
        "detail": "delete_etablissement_data",
        "documentation": {}
    },
    {
        "label": "delete_etablissements_with_sql",
        "kind": 2,
        "importPath": "delete_etablissement_sql",
        "description": "delete_etablissement_sql",
        "peekOfCode": "def delete_etablissements_with_sql():\n    \"\"\"Supprime tous les établissements en utilisant SQL brut\"\"\"\n    with connection.cursor() as cursor:\n        # Compter les établissements\n        cursor.execute(\"SELECT COUNT(*) FROM school_admin_etablissement\")\n        count = cursor.fetchone()[0]\n        print(f\"Nombre d'établissements trouvés : {count}\")\n        if count == 0:\n            print(\"Aucun établissement à supprimer.\")\n            return",
        "detail": "delete_etablissement_sql",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'school.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 5,
        "importPath": "test_code_generation",
        "description": "test_code_generation",
        "peekOfCode": "types = ['primary', 'secondary', 'highschool', 'unknown']\nprint(\"Test de génération de codes d'établissement :\")\nprint(\"-\" * 40)\nfor type_etab in types:\n    code = EtablissementController.generate_etablissement_code(type_etab)\n    print(f\"Type: {type_etab:<10} -> Code généré: {code}\")\nprint(\"-\" * 40)\nprint(\"Test terminé avec succès.\")",
        "detail": "test_code_generation",
        "documentation": {}
    }
]