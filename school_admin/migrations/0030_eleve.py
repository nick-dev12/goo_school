# Generated by Django 5.2.6 on 2025-10-03 22:37

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('school_admin', '0029_classe'),
    ]

    operations = [
        migrations.CreateModel(
            name='Eleve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('prenom', models.CharField(help_text="Prénom de l'élève", max_length=100, verbose_name='Prénom')),
                ('date_naissance', models.DateField(help_text="Date de naissance de l'élève", verbose_name='Date de naissance')),
                ('lieu_naissance', models.CharField(help_text="Lieu de naissance de l'élève", max_length=100, verbose_name='Lieu de naissance')),
                ('sexe', models.CharField(choices=[('M', 'Masculin'), ('F', 'Féminin')], help_text="Sexe de l'élève", max_length=1, verbose_name='Sexe')),
                ('nationalite', models.CharField(help_text="Nationalité de l'élève", max_length=100, verbose_name='Nationalité')),
                ('adresse', models.TextField(help_text="Adresse de résidence de l'élève", verbose_name='Adresse')),
                ('telephone', models.CharField(blank=True, help_text="Numéro de téléphone de l'élève", max_length=20, null=True, verbose_name='Téléphone')),
                ('email', models.EmailField(blank=True, help_text="Adresse email de l'élève", max_length=254, null=True, verbose_name='Email')),
                ('numero_eleve', models.CharField(help_text="Numéro unique d'identification de l'élève", max_length=20, unique=True, verbose_name="Numéro d'élève")),
                ('date_inscription', models.DateField(help_text="Date d'inscription de l'élève", verbose_name="Date d'inscription")),
                ('statut', models.CharField(choices=[('nouvelle', 'Nouvelle inscription'), ('transfert', "Transfert d'établissement"), ('reinscription', 'Réinscription')], help_text="Type d'inscription de l'élève", max_length=20, verbose_name="Statut d'inscription")),
                ('type_responsable', models.CharField(choices=[('parents', 'Parents'), ('tuteur', 'Tuteur légal')], help_text="Type de responsable de l'élève", max_length=20, verbose_name='Type de responsable')),
                ('nom_pere', models.CharField(blank=True, help_text='Nom de famille du père', max_length=100, null=True, verbose_name='Nom du père')),
                ('nom_mere', models.CharField(blank=True, help_text='Nom de famille de la mère', max_length=100, null=True, verbose_name='Nom de la mère')),
                ('telephone_pere', models.CharField(blank=True, help_text='Numéro de téléphone du père', max_length=20, null=True, verbose_name='Téléphone du père')),
                ('telephone_mere', models.CharField(blank=True, help_text='Numéro de téléphone de la mère', max_length=20, null=True, verbose_name='Téléphone de la mère')),
                ('email_pere', models.EmailField(blank=True, help_text='Adresse email du père', max_length=254, null=True, verbose_name='Email du père')),
                ('email_mere', models.EmailField(blank=True, help_text='Adresse email de la mère', max_length=254, null=True, verbose_name='Email de la mère')),
                ('tuteur_nom', models.CharField(blank=True, help_text='Nom de famille du tuteur légal', max_length=100, null=True, verbose_name='Nom du tuteur')),
                ('tuteur_prenom', models.CharField(blank=True, help_text='Prénom du tuteur légal', max_length=100, null=True, verbose_name='Prénom du tuteur')),
                ('tuteur_telephone', models.CharField(blank=True, help_text='Numéro de téléphone du tuteur', max_length=20, null=True, verbose_name='Téléphone du tuteur')),
                ('tuteur_email', models.EmailField(blank=True, help_text='Adresse email du tuteur', max_length=254, null=True, verbose_name='Email du tuteur')),
                ('tuteur_adresse', models.TextField(blank=True, help_text='Adresse complète du tuteur', null=True, verbose_name='Adresse du tuteur')),
                ('tuteur_profession', models.CharField(blank=True, help_text='Profession du tuteur légal', max_length=100, null=True, verbose_name='Profession du tuteur')),
                ('tuteur_lien', models.CharField(blank=True, choices=[('grand_parent', 'Grand-parent'), ('oncle_tante', 'Oncle/Tante'), ('frere_soeur', 'Frère/Sœur'), ('autre_famille', 'Autre membre de la famille'), ('autre', 'Autre')], help_text="Lien de parenté du tuteur avec l'élève", max_length=20, null=True, verbose_name="Lien avec l'élève")),
                ('mot_de_passe_provisoire', models.CharField(help_text="Mot de passe provisoire pour l'accès parent/tuteur", max_length=128, verbose_name='Mot de passe provisoire')),
                ('documents_fournis', models.JSONField(blank=True, default=list, help_text="Liste des documents fournis lors de l'inscription", verbose_name='Documents fournis')),
                ('actif', models.BooleanField(default=True, help_text="Indique si l'élève est actuellement actif", verbose_name='Actif')),
                ('date_creation', models.DateTimeField(auto_now_add=True, help_text='Date de création du compte élève', verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, help_text='Date de dernière modification', verbose_name='Date de modification')),
                ('username', models.CharField(help_text="Nom d'utilisateur unique pour la connexion", max_length=150, unique=True, verbose_name="Nom d'utilisateur")),
                ('is_staff', models.BooleanField(default=False, help_text="Indique si l'utilisateur peut accéder à l'interface d'administration", verbose_name='Membre du personnel')),
                ('is_active', models.BooleanField(default=True, help_text='Indique si ce compte utilisateur doit être considéré comme actif', verbose_name='Actif')),
                ('is_superuser', models.BooleanField(default=False, help_text='Indique que cet utilisateur a toutes les permissions sans les assigner explicitement', verbose_name='Superutilisateur')),
                ('classe', models.ForeignKey(blank=True, help_text="Classe d'affectation de l'élève", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='eleves', to='school_admin.classe', verbose_name='Classe')),
                ('etablissement', models.ForeignKey(help_text='Établissement de scolarisation', on_delete=django.db.models.deletion.CASCADE, related_name='eleves', to='school_admin.etablissement', verbose_name='Établissement')),
                ('groups', models.ManyToManyField(blank=True, help_text='Les groupes auxquels appartient cet utilisateur', related_name='eleve_groups', related_query_name='eleve_group', to='auth.group', verbose_name='groupes')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Permissions spécifiques pour cet utilisateur', related_name='eleve_user_permissions', related_query_name='eleve_user_permission', to='auth.permission', verbose_name='permissions utilisateur')),
            ],
            options={
                'verbose_name': 'Élève',
                'verbose_name_plural': 'Élèves',
                'db_table': 'eleve',
                'ordering': ['username', 'prenom'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
