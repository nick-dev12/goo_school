# Generated by Django 5.2.6 on 2025-10-11 02:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('school_admin', '0053_budget'),
    ]

    operations = [
        migrations.CreateModel(
            name='Professeur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nom', models.CharField(max_length=100, verbose_name='Nom de famille')),
                ('prenom', models.CharField(max_length=100, verbose_name='Prénom')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse email')),
                ('telephone', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit être au format international.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Numéro de téléphone')),
                ('numero_employe', models.CharField(max_length=20, unique=True, verbose_name="Numéro d'employé")),
                ('matiere_principale', models.CharField(choices=[('mathematiques', 'Mathématiques'), ('francais', 'Français'), ('anglais', 'Anglais'), ('histoire_geo', 'Histoire-Géographie'), ('sciences_physiques', 'Sciences Physiques'), ('sciences_naturelles', 'Sciences Naturelles'), ('philosophie', 'Philosophie'), ('economie', 'Économie'), ('informatique', 'Informatique'), ('education_physique', 'Éducation Physique'), ('arts_plastiques', 'Arts Plastiques'), ('musique', 'Musique'), ('allemand', 'Allemand'), ('espagnol', 'Espagnol'), ('arabe', 'Arabe'), ('autre', 'Autre')], max_length=50, verbose_name='Matière principale')),
                ('matieres_secondaires', models.CharField(blank=True, max_length=200, null=True, verbose_name='Matières secondaires (séparées par des virgules)')),
                ('niveau_enseignement', models.CharField(choices=[('maternelle', 'Maternelle'), ('primaire', 'Primaire'), ('college', 'Collège'), ('lycee', 'Lycée'), ('superieur', 'Supérieur')], max_length=20, verbose_name="Niveau d'enseignement")),
                ('statut', models.CharField(choices=[('titulaire', 'Titulaire'), ('vacataire', 'Vacataire'), ('contractuel', 'Contractuel'), ('stagiaire', 'Stagiaire')], default='titulaire', max_length=20, verbose_name='Statut')),
                ('date_embauche', models.DateField(default=django.utils.timezone.now, verbose_name="Date d'embauche")),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('actif', models.BooleanField(default=True, verbose_name='Actif')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='professeurs/photos/', verbose_name='Photo de profil')),
                ('cv', models.FileField(blank=True, null=True, upload_to='professeurs/cv/', verbose_name='CV')),
                ('diplomes', models.TextField(blank=True, null=True, verbose_name='Diplômes obtenus')),
                ('experience_annees', models.PositiveIntegerField(default=0, verbose_name="Années d'expérience")),
                ('specialites', models.TextField(blank=True, null=True, verbose_name='Spécialités')),
                ('notes_administratives', models.TextField(blank=True, null=True, verbose_name='Notes administratives')),
                ('etablissement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='professeurs', to='school_admin.etablissement', verbose_name='Établissement')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Professeur',
                'verbose_name_plural': 'Professeurs',
                'ordering': ['nom', 'prenom'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
